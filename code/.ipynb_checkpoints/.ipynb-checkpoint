{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 1: SAT & ACT Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first markdown cell in a notebook is a great place to provide an overview of your entire project. You will likely want to at least state your\n",
    "\n",
    "## Problem Statement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the problem you are finding answers for from the data given."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Executive Summary\n",
    "\n",
    "If you want to, it's great to use relative links to direct your audience to various sections of a notebook. **HERE'S A DEMONSTRATION WITH THE CURRENT SECTION HEADERS**:\n",
    "\n",
    "### Contents:\n",
    "- [2017 Data Import & Cleaning](#Data-Import-and-Cleaning)\n",
    "- [2018 Data Import and Cleaning](#2018-Data-Import-and-Cleaning)\n",
    "- [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n",
    "- [Data Visualization](#Visualize-the-data)\n",
    "- [Descriptive and Inferential Statistics](#Descriptive-and-Inferential-Statistics)\n",
    "- [Outside Research](#Outside-Research)\n",
    "- [Conclusions and Recommendations](#Conclusions-and-Recommendations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**If you combine your problem statement, executive summary, data dictionary, and conclusions/recommendations, you have an amazing README.md file that quickly aligns your audience to the contents of your project.** Don't forget to cite your data sources!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*All libraries used should be added here*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2017 Data Import and Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Read In sat_2017 & act_2017  Data\n",
    "\n",
    "Read in the `sat_2017.csv` and `act_2017.csv` files and assign them to appropriately named pandas dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\benja\\OneDrive\\Desktop\\General Assembly\\dsi18-workarea\\projects\\Project1234\\project_1\n"
     ]
    }
   ],
   "source": [
    "cd C:\\Users\\benja\\OneDrive\\Desktop\\General Assembly\\dsi18-workarea\\projects\\Project1234\\project_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "sat_2017 = pd.read_csv(r'../project_1/data/sat_2017.csv')\n",
    "\n",
    "act_2017 = pd.read_csv(r'../project_1/data/act_2017.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Display Data\n",
    "\n",
    "Print the first 10 rows of each dataframe to your jupyter notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>Evidence-Based Reading and Writing</th>\n",
       "      <th>Math</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>5%</td>\n",
       "      <td>593</td>\n",
       "      <td>572</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>38%</td>\n",
       "      <td>547</td>\n",
       "      <td>533</td>\n",
       "      <td>1080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>30%</td>\n",
       "      <td>563</td>\n",
       "      <td>553</td>\n",
       "      <td>1116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>3%</td>\n",
       "      <td>614</td>\n",
       "      <td>594</td>\n",
       "      <td>1208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>53%</td>\n",
       "      <td>531</td>\n",
       "      <td>524</td>\n",
       "      <td>1055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>11%</td>\n",
       "      <td>606</td>\n",
       "      <td>595</td>\n",
       "      <td>1201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>100%</td>\n",
       "      <td>530</td>\n",
       "      <td>512</td>\n",
       "      <td>1041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>100%</td>\n",
       "      <td>503</td>\n",
       "      <td>492</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>100%</td>\n",
       "      <td>482</td>\n",
       "      <td>468</td>\n",
       "      <td>950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>83%</td>\n",
       "      <td>520</td>\n",
       "      <td>497</td>\n",
       "      <td>1017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  State Participation  Evidence-Based Reading and Writing  \\\n",
       "0               Alabama            5%                                 593   \n",
       "1                Alaska           38%                                 547   \n",
       "2               Arizona           30%                                 563   \n",
       "3              Arkansas            3%                                 614   \n",
       "4            California           53%                                 531   \n",
       "5              Colorado           11%                                 606   \n",
       "6           Connecticut          100%                                 530   \n",
       "7              Delaware          100%                                 503   \n",
       "8  District of Columbia          100%                                 482   \n",
       "9               Florida           83%                                 520   \n",
       "\n",
       "   Math  Total  \n",
       "0   572   1165  \n",
       "1   533   1080  \n",
       "2   553   1116  \n",
       "3   594   1208  \n",
       "4   524   1055  \n",
       "5   595   1201  \n",
       "6   512   1041  \n",
       "7   492    996  \n",
       "8   468    950  \n",
       "9   497   1017  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sat_2017.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Science</th>\n",
       "      <th>Composite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>National</td>\n",
       "      <td>60%</td>\n",
       "      <td>20.3</td>\n",
       "      <td>20.7</td>\n",
       "      <td>21.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>100%</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.4</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>65%</td>\n",
       "      <td>18.7</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.4</td>\n",
       "      <td>19.9</td>\n",
       "      <td>19.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>62%</td>\n",
       "      <td>18.6</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.1</td>\n",
       "      <td>19.8</td>\n",
       "      <td>19.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>100%</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>California</td>\n",
       "      <td>31%</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.7</td>\n",
       "      <td>23.1</td>\n",
       "      <td>22.2</td>\n",
       "      <td>22.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>100%</td>\n",
       "      <td>20.1</td>\n",
       "      <td>20.3</td>\n",
       "      <td>21.2</td>\n",
       "      <td>20.9</td>\n",
       "      <td>20.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>31%</td>\n",
       "      <td>25.5</td>\n",
       "      <td>24.6</td>\n",
       "      <td>25.6</td>\n",
       "      <td>24.6</td>\n",
       "      <td>25.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>18%</td>\n",
       "      <td>24.1</td>\n",
       "      <td>23.4</td>\n",
       "      <td>24.8</td>\n",
       "      <td>23.6</td>\n",
       "      <td>24.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>32%</td>\n",
       "      <td>24.4</td>\n",
       "      <td>23.5</td>\n",
       "      <td>24.9</td>\n",
       "      <td>23.5</td>\n",
       "      <td>24.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  State Participation  English  Math  Reading  Science  \\\n",
       "0              National           60%     20.3  20.7     21.4     21.0   \n",
       "1               Alabama          100%     18.9  18.4     19.7     19.4   \n",
       "2                Alaska           65%     18.7  19.8     20.4     19.9   \n",
       "3               Arizona           62%     18.6  19.8     20.1     19.8   \n",
       "4              Arkansas          100%     18.9  19.0     19.7     19.5   \n",
       "5            California           31%     22.5  22.7     23.1     22.2   \n",
       "6              Colorado          100%     20.1  20.3     21.2     20.9   \n",
       "7           Connecticut           31%     25.5  24.6     25.6     24.6   \n",
       "8              Delaware           18%     24.1  23.4     24.8     23.6   \n",
       "9  District of Columbia           32%     24.4  23.5     24.9     23.5   \n",
       "\n",
       "  Composite  \n",
       "0      21.0  \n",
       "1      19.2  \n",
       "2      19.8  \n",
       "3      19.7  \n",
       "4      19.4  \n",
       "5      22.8  \n",
       "6      20.8  \n",
       "7      25.2  \n",
       "8      24.1  \n",
       "9      24.2  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "act_2017.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Science</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>52.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>52.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>20.919231</td>\n",
       "      <td>21.173077</td>\n",
       "      <td>22.001923</td>\n",
       "      <td>21.040385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.332132</td>\n",
       "      <td>1.963602</td>\n",
       "      <td>2.048672</td>\n",
       "      <td>3.151113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>16.300000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.100000</td>\n",
       "      <td>2.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>19.000000</td>\n",
       "      <td>19.400000</td>\n",
       "      <td>20.475000</td>\n",
       "      <td>19.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>20.550000</td>\n",
       "      <td>20.900000</td>\n",
       "      <td>21.700000</td>\n",
       "      <td>21.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>23.300000</td>\n",
       "      <td>23.100000</td>\n",
       "      <td>24.125000</td>\n",
       "      <td>22.525000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>25.500000</td>\n",
       "      <td>25.300000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>24.900000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         English       Math    Reading    Science\n",
       "count  52.000000  52.000000  52.000000  52.000000\n",
       "mean   20.919231  21.173077  22.001923  21.040385\n",
       "std     2.332132   1.963602   2.048672   3.151113\n",
       "min    16.300000  18.000000  18.100000   2.300000\n",
       "25%    19.000000  19.400000  20.475000  19.900000\n",
       "50%    20.550000  20.900000  21.700000  21.150000\n",
       "75%    23.300000  23.100000  24.125000  22.525000\n",
       "max    25.500000  25.300000  26.000000  24.900000"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "act_2017.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Verbally Describe Data\n",
    "\n",
    "Take your time looking through the data and thoroughly describe the data in the markdown cell below. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data appears to be recording the participation rate of students in each state for either the SAT or ACT test. \n",
    "\n",
    "The SAT data contains the average SAT scores of students from 50 different states, with two columns indicating Reading/Writing and Math scores. The SAT data also includes participation rates by state.\n",
    "\n",
    "The ACT data also contains the average ACT scores of students from 50 different states, but includes a row with a national average. There are four columns indicating English, Math, Reading and Science scores. The ACT data also includes participation rates by state."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4a. Does the data look complete? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data has been collected from all 50 states, however the multiple errors in the data suggest that the data still needs further refinement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4b. Are there any obvious issues with the observations?\n",
    "\n",
    "**What is the minimum *possible* value for each test/subtest? What is the maximum *possible* value?**\n",
    "\n",
    "Consider comparing any questionable values to the sources of your data:\n",
    "- [SAT](https://blog.collegevine.com/here-are-the-average-sat_2017-scores-by-state/)\n",
    "- [ACT](https://blog.prepscholar.com/act_2017-scores-by-state-averages-highs-and-lows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Min/max possible values for SAT: \n",
    "- Math: 200-800\n",
    "- Evidence-Based Reading and Writing (EBRW): 200-800\n",
    "- Total: 400-1600\n",
    "\n",
    "Min/max possible values for ACT:\n",
    "- Math: 1-36\n",
    "- English: 1-36\n",
    "- Reading: 1-36\n",
    "- Science: 1-36\n",
    "- Total: 1-36\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State                                 Alabama\n",
       "Participation                             10%\n",
       "Evidence-Based Reading and Writing        482\n",
       "Math                                       52\n",
       "Total                                     950\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Min values for SAT\n",
    "sat_2017.min(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>Evidence-Based Reading and Writing</th>\n",
       "      <th>Math</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>69%</td>\n",
       "      <td>536</td>\n",
       "      <td>52</td>\n",
       "      <td>1060</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       State Participation  Evidence-Based Reading and Writing  Math  Total\n",
       "20  Maryland           69%                                 536    52   1060"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sat_2017.loc[sat_2017['Participation'] == 482]\n",
    "\n",
    "# Looking into Math score of 52 -- definitely an error given that the min score for SAT subjects is 200.\n",
    "sat_2017.loc[sat_2017['Math'] == 52]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State            Alabama\n",
       "Participation        60%\n",
       "English             16.3\n",
       "Math                  18\n",
       "Reading             18.1\n",
       "Science              2.3\n",
       "Composite           17.8\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Min values for ACT\n",
    "act_2017.min(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Science</th>\n",
       "      <th>Composite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>28%</td>\n",
       "      <td>23.3</td>\n",
       "      <td>23.1</td>\n",
       "      <td>24.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>23.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       State Participation  English  Math  Reading  Science Composite\n",
       "21  Maryland           28%     23.3  23.1     24.2      2.3      23.6"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking into Science score of 2.3 -- also seems to be an error as 2.3 is an abnormally low average score.\n",
    "act_2017.loc[act_2017['Science'] == 2.3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State                                 Wyoming\n",
       "Participation                             96%\n",
       "Evidence-Based Reading and Writing        644\n",
       "Math                                      651\n",
       "Total                                    1295\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Max values for SAT\n",
    "sat_2017.max(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State            Wyoming\n",
       "Participation        98%\n",
       "English             25.5\n",
       "Math                25.3\n",
       "Reading               26\n",
       "Science             24.9\n",
       "Composite           25.5\n",
       "dtype: object"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Max values for ACT\n",
    "act_2017.max(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4c. Fix any errors you identified\n",
    "\n",
    "**The data is available** so there's no need to guess or calculate anything. If you didn't find any errors, continue to the next step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State            Wyoming\n",
       "Participation       100%\n",
       "English             19.4\n",
       "Math                19.8\n",
       "Reading             20.8\n",
       "Science             20.6\n",
       "Composite          20.2x\n",
       "Name: 51, dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Composite score has an 'x'\n",
    "act_2017.iloc[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fixing composite score for Wyoming\n",
    "act_2017 = act_2017.replace('20.2x', 20.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State                                 Maryland\n",
       "Participation                              69%\n",
       "Evidence-Based Reading and Writing         536\n",
       "Math                                        52\n",
       "Total                                     1060\n",
       "Name: 20, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sat_2017.iloc[20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fixing SAT Math score for Maryland\n",
    "sat_2017.loc[20, 'Math'] = 524 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State            Maryland\n",
       "Participation         28%\n",
       "English              23.3\n",
       "Math                 23.1\n",
       "Reading              24.2\n",
       "Science               2.3\n",
       "Composite            23.6\n",
       "Name: 21, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "act_2017.iloc[21]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fixing ACT Science score for Maryland\n",
    "act_2017.loc[21, 'Science'] = 23.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. What are your data types? \n",
    "Display the data types of each feature. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 52 entries, 0 to 51\n",
      "Data columns (total 7 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   State          52 non-null     object \n",
      " 1   Participation  52 non-null     object \n",
      " 2   English        52 non-null     float64\n",
      " 3   Math           52 non-null     float64\n",
      " 4   Reading        52 non-null     float64\n",
      " 5   Science        52 non-null     float64\n",
      " 6   Composite      52 non-null     object \n",
      "dtypes: float64(4), object(3)\n",
      "memory usage: 3.0+ KB\n"
     ]
    }
   ],
   "source": [
    "act_2017.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 51 entries, 0 to 50\n",
      "Data columns (total 5 columns):\n",
      " #   Column                              Non-Null Count  Dtype \n",
      "---  ------                              --------------  ----- \n",
      " 0   State                               51 non-null     object\n",
      " 1   Participation                       51 non-null     object\n",
      " 2   Evidence-Based Reading and Writing  51 non-null     int64 \n",
      " 3   Math                                51 non-null     int64 \n",
      " 4   Total                               51 non-null     int64 \n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 2.1+ KB\n"
     ]
    }
   ],
   "source": [
    "sat_2017.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What did you learn?\n",
    "- Do any of them seem odd?  \n",
    "- Which ones are not as they should be?  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: Composite should be a float, not a string object. Participation should also be an int or float."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. Fix Incorrect Data Types\n",
    "Based on what you discovered above, use appropriate methods to re-type incorrectly typed data.\n",
    "- Define a function that will allow you to convert participation rates to an appropriate numeric type. Use `map` or `apply` to change these columns in each dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "def participation_to_int(df):\n",
    "    for col in df.columns:\n",
    "        if 'percentage' in col.lower() or 'participation' in col.lower():\n",
    "            df[col] = df[col].replace('%','', regex=True).astype('int') # Using regex insetad of splitting strings\n",
    "            \n",
    "participation_to_int(act_2017)\n",
    "participation_to_int(sat_2017)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace object values in composite column with float values \n",
    "act_2017['Composite'] = list(map(lambda x: float(x), act_2017['Composite']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(act_2017['Composite'].iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(numpy.int32, numpy.int32)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(sat_2017['Participation'].iloc[0]), type(act_2017['Participation'].iloc[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Fix any individual values preventing other columns from being the appropriate type."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Finish your data modifications by making sure the columns are now typed appropriately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>English</th>\n",
       "      <th>Math</th>\n",
       "      <th>Reading</th>\n",
       "      <th>Science</th>\n",
       "      <th>Composite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>National</td>\n",
       "      <td>60</td>\n",
       "      <td>20.3</td>\n",
       "      <td>20.7</td>\n",
       "      <td>21.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      State  Participation  English  Math  Reading  Science  Composite\n",
       "0  National             60     20.3  20.7     21.4     21.0       21.0"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "act_2017.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>Evidence-Based Reading and Writing</th>\n",
       "      <th>Math</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>5</td>\n",
       "      <td>593</td>\n",
       "      <td>572</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     State  Participation  Evidence-Based Reading and Writing  Math  Total\n",
       "0  Alabama              5                                 593   572   1165"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sat_2017.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Display the data types again to confirm they are correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(numpy.float64, numpy.int64, numpy.int64)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(act_2017['Composite'].iloc[0]), \\\n",
    "type(act_2017['Participation'].iloc[0]), \\\n",
    "type(sat_2017['Participation'].iloc[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7. Rename Columns\n",
    "Change the names of the columns to more expressive names so that you can tell the difference the sat_2017 columns and the act_2017 columns. Your solution should map all column names being changed at once (no repeated singular name-changes). **We will be combining these data with some of the data from 2018, and so you should name columns in an appropriate way**.\n",
    "\n",
    "**Guidelines**:\n",
    "- Column names should be all lowercase (you will thank yourself when you start pushing data to SQL later in the course)\n",
    "- Column names should not contain spaces (underscores will suffice--this allows for using the `df.column_name` method to access columns in addition to `df['column_name']`.\n",
    "- Column names should be unique and informative (the only feature that we act_2017ually share between dataframes is the state)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['State', 'Participation', 'English', 'Math', 'Reading', 'Science',\n",
       "       'Composite'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "act_2017.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>act_2017_participation</th>\n",
       "      <th>act_2017_english</th>\n",
       "      <th>act_2017_math</th>\n",
       "      <th>act_2017_reading</th>\n",
       "      <th>act_2017_science</th>\n",
       "      <th>act_2017_composite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>National</td>\n",
       "      <td>60</td>\n",
       "      <td>20.3</td>\n",
       "      <td>20.7</td>\n",
       "      <td>21.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.4</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>65</td>\n",
       "      <td>18.7</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.4</td>\n",
       "      <td>19.9</td>\n",
       "      <td>19.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>62</td>\n",
       "      <td>18.6</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.1</td>\n",
       "      <td>19.8</td>\n",
       "      <td>19.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      state  act_2017_participation  act_2017_english  act_2017_math  \\\n",
       "0  National                      60              20.3           20.7   \n",
       "1   Alabama                     100              18.9           18.4   \n",
       "2    Alaska                      65              18.7           19.8   \n",
       "3   Arizona                      62              18.6           19.8   \n",
       "4  Arkansas                     100              18.9           19.0   \n",
       "\n",
       "   act_2017_reading  act_2017_science  act_2017_composite  \n",
       "0              21.4              21.0                21.0  \n",
       "1              19.7              19.4                19.2  \n",
       "2              20.4              19.9                19.8  \n",
       "3              20.1              19.8                19.7  \n",
       "4              19.7              19.5                19.4  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rename columns for ACT test\n",
    "act_2017.rename(columns={'State': 'state'}, inplace=True)\n",
    "\n",
    "for col in act_2017.columns[1:]:\n",
    "    act_2017.rename(columns={col: 'act_2017_' + col.lower()}, inplace = True)\n",
    "\n",
    "    \n",
    "act_2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <th>sat_2017_evidence-based reading and writing</th>\n",
       "      <th>sat_2017_math</th>\n",
       "      <th>sat_2017_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>5</td>\n",
       "      <td>593</td>\n",
       "      <td>572</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>38</td>\n",
       "      <td>547</td>\n",
       "      <td>533</td>\n",
       "      <td>1080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>30</td>\n",
       "      <td>563</td>\n",
       "      <td>553</td>\n",
       "      <td>1116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>3</td>\n",
       "      <td>614</td>\n",
       "      <td>594</td>\n",
       "      <td>1208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>53</td>\n",
       "      <td>531</td>\n",
       "      <td>524</td>\n",
       "      <td>1055</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  sat_2017_participation  \\\n",
       "0     Alabama                       5   \n",
       "1      Alaska                      38   \n",
       "2     Arizona                      30   \n",
       "3    Arkansas                       3   \n",
       "4  California                      53   \n",
       "\n",
       "   sat_2017_evidence-based reading and writing  sat_2017_math  sat_2017_total  \n",
       "0                                          593            572            1165  \n",
       "1                                          547            533            1080  \n",
       "2                                          563            553            1116  \n",
       "3                                          614            594            1208  \n",
       "4                                          531            524            1055  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rename columns for SAT test\n",
    "sat_2017.rename(columns={'State': 'state'}, inplace=True)\n",
    "\n",
    "for col in sat_2017.columns[1:]:\n",
    "    sat_2017.rename(columns={col: 'sat_2017_' + col.lower()}, inplace = True)\n",
    "    \n",
    "sat_2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <th>sat_2017_reading_and_writing</th>\n",
       "      <th>sat_2017_math</th>\n",
       "      <th>sat_2017_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>5</td>\n",
       "      <td>593</td>\n",
       "      <td>572</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     state  sat_2017_participation  sat_2017_reading_and_writing  \\\n",
       "0  Alabama                       5                           593   \n",
       "\n",
       "   sat_2017_math  sat_2017_total  \n",
       "0            572            1165  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sat_2017.rename(columns={'sat_2017_evidence-based reading and writing': 'sat_2017_reading_and_writing'},\n",
    "                inplace=True)\n",
    "\n",
    "sat_2017.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 8. Create a data dictionary\n",
    "\n",
    "Now that we've fixed our data, and given it appropriate names, let's create a [data dictionary](http://library.ucmerced.edu/node/10249). \n",
    "\n",
    "A data dictionary provides a quick overview of features/variables/columns, alongside data types and descriptions. The more descriptive you can be, the more useful this document is.\n",
    "\n",
    "Example of a Fictional Data Dictionary Entry: \n",
    "\n",
    "|Feature|Type|Dataset|Description|\n",
    "|---|---|---|---|\n",
    "|**county_pop**|*integer*|2010 census|The population of the county (units in thousands, where 2.5 represents 2500 people).| \n",
    "|**per_poverty**|*float*|2010 census|The percent of the county over the age of 18 living below the 200% of official US poverty rate (units percent to two decimal places 98.10 means 98.1%)|\n",
    "\n",
    "[Here's a quick link to a short guide for formatting markdown in Jupyter notebooks](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html).\n",
    "\n",
    "Provided is the skeleton for formatting a markdown table, with columns headers that will help you create a data dictionary to quickly summarize your data, as well as some examples. **This would be a great thing to copy and paste into your custom README for this project.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Dictionary for ACT / SAT dataset\n",
    "|Feature|Type|Dataset|Description|\n",
    "|---|---|---|---|\n",
    "|**state**|*string*|SAT 2017 Results|States in the USA e.g. Alabama and Wisconsin| \n",
    "|**sat_2017_participation**|*integer*|SAT 2017 Results|Participation rate as a percentage|\n",
    "|**sat_2017_reading_and_writing**|*integer*|SAT 2017 Results|Average score for reading and writing|\n",
    "|**sat_2017_math**|*integer*|SAT 2017 Results|Average math score|\n",
    "|**sat_2017_total**|*integer*|SAT 2017 Results|Average total score|\n",
    "|**act_2017_participation**|*integer*|SAT 2017 Results|Participation rate as a percentage|\n",
    "|**act_2017_english**|*float*|SAT 2017 Results|Average english score|\n",
    "|**act_2017_math**|*float*|SAT 2017 Results|Average math score|\n",
    "|**act_2017_reading**|*float*|SAT 2017 Results|Average reading score|\n",
    "|**act_2017_science**|*float*|SAT 2017 Results|Average science score|\n",
    "|**act_2017_composite**|*float*|SAT 2017 Results|Average total score|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9. Drop unnecessary rows\n",
    "\n",
    "One of our dataframes contains an extra row. Identify and remove this from the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "National\n"
     ]
    }
   ],
   "source": [
    "act_2017_states = list(act_2017['state'])\n",
    "sat_2017_states = list(sat_2017['state'])\n",
    "\n",
    "# To identify extra row\n",
    "for state in act_2017_states:\n",
    "    if state not in sat_2017_states:\n",
    "        print(state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>act_2017_participation</th>\n",
       "      <th>act_2017_english</th>\n",
       "      <th>act_2017_math</th>\n",
       "      <th>act_2017_reading</th>\n",
       "      <th>act_2017_science</th>\n",
       "      <th>act_2017_composite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>National</td>\n",
       "      <td>60</td>\n",
       "      <td>20.3</td>\n",
       "      <td>20.7</td>\n",
       "      <td>21.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.4</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>65</td>\n",
       "      <td>18.7</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.4</td>\n",
       "      <td>19.9</td>\n",
       "      <td>19.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>62</td>\n",
       "      <td>18.6</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.1</td>\n",
       "      <td>19.8</td>\n",
       "      <td>19.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      state  act_2017_participation  act_2017_english  act_2017_math  \\\n",
       "0  National                      60              20.3           20.7   \n",
       "1   Alabama                     100              18.9           18.4   \n",
       "2    Alaska                      65              18.7           19.8   \n",
       "3   Arizona                      62              18.6           19.8   \n",
       "4  Arkansas                     100              18.9           19.0   \n",
       "\n",
       "   act_2017_reading  act_2017_science  act_2017_composite  \n",
       "0              21.4              21.0                21.0  \n",
       "1              19.7              19.4                19.2  \n",
       "2              20.4              19.9                19.8  \n",
       "3              20.1              19.8                19.7  \n",
       "4              19.7              19.5                19.4  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "act_2017[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>act_2017_participation</th>\n",
       "      <th>act_2017_english</th>\n",
       "      <th>act_2017_math</th>\n",
       "      <th>act_2017_reading</th>\n",
       "      <th>act_2017_science</th>\n",
       "      <th>act_2017_composite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.4</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>65</td>\n",
       "      <td>18.7</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.4</td>\n",
       "      <td>19.9</td>\n",
       "      <td>19.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>62</td>\n",
       "      <td>18.6</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.1</td>\n",
       "      <td>19.8</td>\n",
       "      <td>19.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>California</td>\n",
       "      <td>31</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.7</td>\n",
       "      <td>23.1</td>\n",
       "      <td>22.2</td>\n",
       "      <td>22.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  act_2017_participation  act_2017_english  act_2017_math  \\\n",
       "1     Alabama                     100              18.9           18.4   \n",
       "2      Alaska                      65              18.7           19.8   \n",
       "3     Arizona                      62              18.6           19.8   \n",
       "4    Arkansas                     100              18.9           19.0   \n",
       "5  California                      31              22.5           22.7   \n",
       "\n",
       "   act_2017_reading  act_2017_science  act_2017_composite  \n",
       "1              19.7              19.4                19.2  \n",
       "2              20.4              19.9                19.8  \n",
       "3              20.1              19.8                19.7  \n",
       "4              19.7              19.5                19.4  \n",
       "5              23.1              22.2                22.8  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dropping first row\n",
    "act_2017 = act_2017.drop([0])\n",
    "act_2017.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 10. Merge Dataframes\n",
    "\n",
    "Join the 2017 act_2017 and sat_2017 dataframes using the state in each dataframe as the key. Assign this to a new variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2017_participation</th>\n",
       "      <th>act_2017_english</th>\n",
       "      <th>act_2017_math</th>\n",
       "      <th>act_2017_reading</th>\n",
       "      <th>act_2017_science</th>\n",
       "      <th>act_2017_composite</th>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <th>sat_2017_reading_and_writing</th>\n",
       "      <th>sat_2017_math</th>\n",
       "      <th>sat_2017_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.4</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.2</td>\n",
       "      <td>5</td>\n",
       "      <td>593</td>\n",
       "      <td>572</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>65</td>\n",
       "      <td>18.7</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.4</td>\n",
       "      <td>19.9</td>\n",
       "      <td>19.8</td>\n",
       "      <td>38</td>\n",
       "      <td>547</td>\n",
       "      <td>533</td>\n",
       "      <td>1080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <td>62</td>\n",
       "      <td>18.6</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.1</td>\n",
       "      <td>19.8</td>\n",
       "      <td>19.7</td>\n",
       "      <td>30</td>\n",
       "      <td>563</td>\n",
       "      <td>553</td>\n",
       "      <td>1116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.4</td>\n",
       "      <td>3</td>\n",
       "      <td>614</td>\n",
       "      <td>594</td>\n",
       "      <td>1208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>31</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.7</td>\n",
       "      <td>23.1</td>\n",
       "      <td>22.2</td>\n",
       "      <td>22.8</td>\n",
       "      <td>53</td>\n",
       "      <td>531</td>\n",
       "      <td>524</td>\n",
       "      <td>1055</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            act_2017_participation  act_2017_english  act_2017_math  \\\n",
       "state                                                                 \n",
       "Alabama                        100              18.9           18.4   \n",
       "Alaska                          65              18.7           19.8   \n",
       "Arizona                         62              18.6           19.8   \n",
       "Arkansas                       100              18.9           19.0   \n",
       "California                      31              22.5           22.7   \n",
       "\n",
       "            act_2017_reading  act_2017_science  act_2017_composite  \\\n",
       "state                                                                \n",
       "Alabama                 19.7              19.4                19.2   \n",
       "Alaska                  20.4              19.9                19.8   \n",
       "Arizona                 20.1              19.8                19.7   \n",
       "Arkansas                19.7              19.5                19.4   \n",
       "California              23.1              22.2                22.8   \n",
       "\n",
       "            sat_2017_participation  sat_2017_reading_and_writing  \\\n",
       "state                                                              \n",
       "Alabama                          5                           593   \n",
       "Alaska                          38                           547   \n",
       "Arizona                         30                           563   \n",
       "Arkansas                         3                           614   \n",
       "California                      53                           531   \n",
       "\n",
       "            sat_2017_math  sat_2017_total  \n",
       "state                                      \n",
       "Alabama               572            1165  \n",
       "Alaska                533            1080  \n",
       "Arizona               553            1116  \n",
       "Arkansas              594            1208  \n",
       "California            524            1055  "
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_2017 = act_2017.set_index('state').join(sat_2017.set_index('state'))\n",
    "combined_2017[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 11. Save your cleaned, merged dataframe\n",
    "\n",
    "Use a relative path to save out your data as `combined_2017.csv`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_2017.to_csv('../project_1/data/combined_2017.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2018 Data Import and Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Links to the 2018 act_2017 and sat_2017 data are provided in the README. These data live in PDFs, and so you'll get to enjoy practicing some *manual* data collection. Save these data as a CSV in your `data` directory, and import, explore, and clean these data in the same way you did above. **Make sure you comment on your steps so it is clear *why* you are doing each process**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import 2018 SAT and ACT data as dataframes\n",
    "sat_2018 = pd.read_csv(r'..\\project_1\\data\\sat_2018.csv')\n",
    "\n",
    "act_2018 = pd.read_csv(r'..\\project_1\\data\\act_2018_updated.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Participation</th>\n",
       "      <th>Evidence-Based Reading and Writing</th>\n",
       "      <th>Math</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>6%</td>\n",
       "      <td>595</td>\n",
       "      <td>571</td>\n",
       "      <td>1166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>43%</td>\n",
       "      <td>562</td>\n",
       "      <td>544</td>\n",
       "      <td>1106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>29%</td>\n",
       "      <td>577</td>\n",
       "      <td>572</td>\n",
       "      <td>1149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>5%</td>\n",
       "      <td>592</td>\n",
       "      <td>576</td>\n",
       "      <td>1169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>60%</td>\n",
       "      <td>540</td>\n",
       "      <td>536</td>\n",
       "      <td>1076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        State Participation  Evidence-Based Reading and Writing  Math  Total\n",
       "0     Alabama            6%                                 595   571   1166\n",
       "1      Alaska           43%                                 562   544   1106\n",
       "2     Arizona           29%                                 577   572   1149\n",
       "3    Arkansas            5%                                 592   576   1169\n",
       "4  California           60%                                 540   536   1076"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sat_2018.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>act_2018_percentage_of_students_tested</th>\n",
       "      <th>act_2018_average_composite_score</th>\n",
       "      <th>act_2018_average_english_score</th>\n",
       "      <th>act_2018_average_math_score</th>\n",
       "      <th>act_2018_average_reading_score</th>\n",
       "      <th>act_2018_average_science_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>100</td>\n",
       "      <td>19.1</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.3</td>\n",
       "      <td>19.6</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>33</td>\n",
       "      <td>20.8</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.6</td>\n",
       "      <td>21.6</td>\n",
       "      <td>20.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>66</td>\n",
       "      <td>19.2</td>\n",
       "      <td>18.2</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>100</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.1</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>27</td>\n",
       "      <td>22.7</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  act_2018_percentage_of_students_tested  \\\n",
       "0     Alabama                                     100   \n",
       "1      Alaska                                      33   \n",
       "2     Arizona                                      66   \n",
       "3    Arkansas                                     100   \n",
       "4  California                                      27   \n",
       "\n",
       "   act_2018_average_composite_score  act_2018_average_english_score  \\\n",
       "0                              19.1                            18.9   \n",
       "1                              20.8                            19.8   \n",
       "2                              19.2                            18.2   \n",
       "3                              19.4                            19.1   \n",
       "4                              22.7                            22.5   \n",
       "\n",
       "   act_2018_average_math_score  act_2018_average_reading_score  \\\n",
       "0                         18.3                            19.6   \n",
       "1                         20.6                            21.6   \n",
       "2                         19.4                            19.5   \n",
       "3                         18.9                            19.7   \n",
       "4                         22.5                            23.0   \n",
       "\n",
       "   act_2018_average_science_score  \n",
       "0                            19.0  \n",
       "1                            20.7  \n",
       "2                            19.2  \n",
       "3                            19.4  \n",
       "4                            22.1  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Rename act_2018 results\n",
    "\n",
    "# Rename state\n",
    "act_2018.rename(columns={'State': 'state'}, inplace=True)\n",
    "\n",
    "# Loop over each remaining column\n",
    "for col in act_2018.columns[1:]:\n",
    "    act_2018.rename(columns={col: 'act_2018_' + col.lower().replace(' ','_')}, inplace = True)\n",
    "    \n",
    "act_2018.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Rename sat_2018 results\n",
    "\n",
    "# Rename state\n",
    "sat_2018.rename(columns={'State': 'state'}, inplace=True)\n",
    "\n",
    "# Loop over each remaining column\n",
    "for col in sat_2018.columns[1:]:\n",
    "    sat_2018.rename(columns={col: 'sat_2018_' + col.lower().replace(' ','_')}, inplace = True)\n",
    "\n",
    "# Rename EBRW column\n",
    "sat_2018.rename(columns={'sat_2018_evidence-based_reading_and_writing': 'sat_2018_reading_and_writing'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2018_percentage_of_students_tested</th>\n",
       "      <th>act_2018_average_composite_score</th>\n",
       "      <th>act_2018_average_english_score</th>\n",
       "      <th>act_2018_average_math_score</th>\n",
       "      <th>act_2018_average_reading_score</th>\n",
       "      <th>act_2018_average_science_score</th>\n",
       "      <th>sat_2018_participation</th>\n",
       "      <th>sat_2018_reading_and_writing</th>\n",
       "      <th>sat_2018_math</th>\n",
       "      <th>sat_2018_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>100</td>\n",
       "      <td>19.1</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.3</td>\n",
       "      <td>19.6</td>\n",
       "      <td>19.0</td>\n",
       "      <td>6%</td>\n",
       "      <td>595</td>\n",
       "      <td>571</td>\n",
       "      <td>1166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>33</td>\n",
       "      <td>20.8</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.6</td>\n",
       "      <td>21.6</td>\n",
       "      <td>20.7</td>\n",
       "      <td>43%</td>\n",
       "      <td>562</td>\n",
       "      <td>544</td>\n",
       "      <td>1106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <td>66</td>\n",
       "      <td>19.2</td>\n",
       "      <td>18.2</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.2</td>\n",
       "      <td>29%</td>\n",
       "      <td>577</td>\n",
       "      <td>572</td>\n",
       "      <td>1149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>100</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.1</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>5%</td>\n",
       "      <td>592</td>\n",
       "      <td>576</td>\n",
       "      <td>1169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>27</td>\n",
       "      <td>22.7</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>22.1</td>\n",
       "      <td>60%</td>\n",
       "      <td>540</td>\n",
       "      <td>536</td>\n",
       "      <td>1076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            act_2018_percentage_of_students_tested  \\\n",
       "state                                                \n",
       "Alabama                                        100   \n",
       "Alaska                                          33   \n",
       "Arizona                                         66   \n",
       "Arkansas                                       100   \n",
       "California                                      27   \n",
       "\n",
       "            act_2018_average_composite_score  act_2018_average_english_score  \\\n",
       "state                                                                          \n",
       "Alabama                                 19.1                            18.9   \n",
       "Alaska                                  20.8                            19.8   \n",
       "Arizona                                 19.2                            18.2   \n",
       "Arkansas                                19.4                            19.1   \n",
       "California                              22.7                            22.5   \n",
       "\n",
       "            act_2018_average_math_score  act_2018_average_reading_score  \\\n",
       "state                                                                     \n",
       "Alabama                            18.3                            19.6   \n",
       "Alaska                             20.6                            21.6   \n",
       "Arizona                            19.4                            19.5   \n",
       "Arkansas                           18.9                            19.7   \n",
       "California                         22.5                            23.0   \n",
       "\n",
       "            act_2018_average_science_score sat_2018_participation  \\\n",
       "state                                                               \n",
       "Alabama                               19.0                     6%   \n",
       "Alaska                                20.7                    43%   \n",
       "Arizona                               19.2                    29%   \n",
       "Arkansas                              19.4                     5%   \n",
       "California                            22.1                    60%   \n",
       "\n",
       "            sat_2018_reading_and_writing  sat_2018_math  sat_2018_total  \n",
       "state                                                                    \n",
       "Alabama                              595            571            1166  \n",
       "Alaska                               562            544            1106  \n",
       "Arizona                              577            572            1149  \n",
       "Arkansas                             592            576            1169  \n",
       "California                           540            536            1076  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combine 2018 data into a dataframe\n",
    "combined_2018 = act_2018.set_index('state').join(sat_2018.set_index('state'))\n",
    "combined_2018[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combine your 2017 and 2018 data into a single dataframe\n",
    "Joining on state names should work, assuming you formatted all your state names identically. Make sure none of your columns (other than state) have identical names. Do yourself a favor and decide if you're encoding participation rates as floats or integers and standardize this across your datasets.\n",
    "\n",
    "Save the contents of this merged dataframe as `final.csv`.\n",
    "\n",
    "**Use this combined dataframe for the remainder of the project**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2017_participation</th>\n",
       "      <th>act_2017_english</th>\n",
       "      <th>act_2017_math</th>\n",
       "      <th>act_2017_reading</th>\n",
       "      <th>act_2017_science</th>\n",
       "      <th>act_2017_composite</th>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <th>sat_2017_reading_and_writing</th>\n",
       "      <th>sat_2017_math</th>\n",
       "      <th>sat_2017_total</th>\n",
       "      <th>act_2018_percentage_of_students_tested</th>\n",
       "      <th>act_2018_average_composite_score</th>\n",
       "      <th>act_2018_average_english_score</th>\n",
       "      <th>act_2018_average_math_score</th>\n",
       "      <th>act_2018_average_reading_score</th>\n",
       "      <th>act_2018_average_science_score</th>\n",
       "      <th>sat_2018_participation</th>\n",
       "      <th>sat_2018_reading_and_writing</th>\n",
       "      <th>sat_2018_math</th>\n",
       "      <th>sat_2018_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.4</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.2</td>\n",
       "      <td>5</td>\n",
       "      <td>593</td>\n",
       "      <td>572</td>\n",
       "      <td>1165</td>\n",
       "      <td>100</td>\n",
       "      <td>19.1</td>\n",
       "      <td>18.9</td>\n",
       "      <td>18.3</td>\n",
       "      <td>19.6</td>\n",
       "      <td>19.0</td>\n",
       "      <td>6%</td>\n",
       "      <td>595</td>\n",
       "      <td>571</td>\n",
       "      <td>1166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>65</td>\n",
       "      <td>18.7</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.4</td>\n",
       "      <td>19.9</td>\n",
       "      <td>19.8</td>\n",
       "      <td>38</td>\n",
       "      <td>547</td>\n",
       "      <td>533</td>\n",
       "      <td>1080</td>\n",
       "      <td>33</td>\n",
       "      <td>20.8</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.6</td>\n",
       "      <td>21.6</td>\n",
       "      <td>20.7</td>\n",
       "      <td>43%</td>\n",
       "      <td>562</td>\n",
       "      <td>544</td>\n",
       "      <td>1106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <td>62</td>\n",
       "      <td>18.6</td>\n",
       "      <td>19.8</td>\n",
       "      <td>20.1</td>\n",
       "      <td>19.8</td>\n",
       "      <td>19.7</td>\n",
       "      <td>30</td>\n",
       "      <td>563</td>\n",
       "      <td>553</td>\n",
       "      <td>1116</td>\n",
       "      <td>66</td>\n",
       "      <td>19.2</td>\n",
       "      <td>18.2</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.2</td>\n",
       "      <td>29%</td>\n",
       "      <td>577</td>\n",
       "      <td>572</td>\n",
       "      <td>1149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>100</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.5</td>\n",
       "      <td>19.4</td>\n",
       "      <td>3</td>\n",
       "      <td>614</td>\n",
       "      <td>594</td>\n",
       "      <td>1208</td>\n",
       "      <td>100</td>\n",
       "      <td>19.4</td>\n",
       "      <td>19.1</td>\n",
       "      <td>18.9</td>\n",
       "      <td>19.7</td>\n",
       "      <td>19.4</td>\n",
       "      <td>5%</td>\n",
       "      <td>592</td>\n",
       "      <td>576</td>\n",
       "      <td>1169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>31</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.7</td>\n",
       "      <td>23.1</td>\n",
       "      <td>22.2</td>\n",
       "      <td>22.8</td>\n",
       "      <td>53</td>\n",
       "      <td>531</td>\n",
       "      <td>524</td>\n",
       "      <td>1055</td>\n",
       "      <td>27</td>\n",
       "      <td>22.7</td>\n",
       "      <td>22.5</td>\n",
       "      <td>22.5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>22.1</td>\n",
       "      <td>60%</td>\n",
       "      <td>540</td>\n",
       "      <td>536</td>\n",
       "      <td>1076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            act_2017_participation  act_2017_english  act_2017_math  \\\n",
       "state                                                                 \n",
       "Alabama                        100              18.9           18.4   \n",
       "Alaska                          65              18.7           19.8   \n",
       "Arizona                         62              18.6           19.8   \n",
       "Arkansas                       100              18.9           19.0   \n",
       "California                      31              22.5           22.7   \n",
       "\n",
       "            act_2017_reading  act_2017_science  act_2017_composite  \\\n",
       "state                                                                \n",
       "Alabama                 19.7              19.4                19.2   \n",
       "Alaska                  20.4              19.9                19.8   \n",
       "Arizona                 20.1              19.8                19.7   \n",
       "Arkansas                19.7              19.5                19.4   \n",
       "California              23.1              22.2                22.8   \n",
       "\n",
       "            sat_2017_participation  sat_2017_reading_and_writing  \\\n",
       "state                                                              \n",
       "Alabama                          5                           593   \n",
       "Alaska                          38                           547   \n",
       "Arizona                         30                           563   \n",
       "Arkansas                         3                           614   \n",
       "California                      53                           531   \n",
       "\n",
       "            sat_2017_math  sat_2017_total  \\\n",
       "state                                       \n",
       "Alabama               572            1165   \n",
       "Alaska                533            1080   \n",
       "Arizona               553            1116   \n",
       "Arkansas              594            1208   \n",
       "California            524            1055   \n",
       "\n",
       "            act_2018_percentage_of_students_tested  \\\n",
       "state                                                \n",
       "Alabama                                        100   \n",
       "Alaska                                          33   \n",
       "Arizona                                         66   \n",
       "Arkansas                                       100   \n",
       "California                                      27   \n",
       "\n",
       "            act_2018_average_composite_score  act_2018_average_english_score  \\\n",
       "state                                                                          \n",
       "Alabama                                 19.1                            18.9   \n",
       "Alaska                                  20.8                            19.8   \n",
       "Arizona                                 19.2                            18.2   \n",
       "Arkansas                                19.4                            19.1   \n",
       "California                              22.7                            22.5   \n",
       "\n",
       "            act_2018_average_math_score  act_2018_average_reading_score  \\\n",
       "state                                                                     \n",
       "Alabama                            18.3                            19.6   \n",
       "Alaska                             20.6                            21.6   \n",
       "Arizona                            19.4                            19.5   \n",
       "Arkansas                           18.9                            19.7   \n",
       "California                         22.5                            23.0   \n",
       "\n",
       "            act_2018_average_science_score sat_2018_participation  \\\n",
       "state                                                               \n",
       "Alabama                               19.0                     6%   \n",
       "Alaska                                20.7                    43%   \n",
       "Arizona                               19.2                    29%   \n",
       "Arkansas                              19.4                     5%   \n",
       "California                            22.1                    60%   \n",
       "\n",
       "            sat_2018_reading_and_writing  sat_2018_math  sat_2018_total  \n",
       "state                                                                    \n",
       "Alabama                              595            571            1166  \n",
       "Alaska                               562            544            1106  \n",
       "Arizona                              577            572            1149  \n",
       "Arkansas                             592            576            1169  \n",
       "California                           540            536            1076  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = combined_2017.join(combined_2018)\n",
    "final[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "def participation_to_int(df):\n",
    "    for col in df.columns:\n",
    "        if 'percentage' in col or 'participation' in col:\n",
    "            df[col] = df[col].replace('%','', regex=True).astype('int64') # Using regex instead of splitting string here\n",
    "            \n",
    "participation_to_int(final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 51 entries, Alabama to Wyoming\n",
      "Data columns (total 20 columns):\n",
      " #   Column                                  Non-Null Count  Dtype  \n",
      "---  ------                                  --------------  -----  \n",
      " 0   act_2017_participation                  51 non-null     int64  \n",
      " 1   act_2017_english                        51 non-null     float64\n",
      " 2   act_2017_math                           51 non-null     float64\n",
      " 3   act_2017_reading                        51 non-null     float64\n",
      " 4   act_2017_science                        51 non-null     float64\n",
      " 5   act_2017_composite                      51 non-null     float64\n",
      " 6   sat_2017_participation                  51 non-null     int64  \n",
      " 7   sat_2017_reading_and_writing            51 non-null     int64  \n",
      " 8   sat_2017_math                           51 non-null     int64  \n",
      " 9   sat_2017_total                          51 non-null     int64  \n",
      " 10  act_2018_percentage_of_students_tested  51 non-null     int64  \n",
      " 11  act_2018_average_composite_score        51 non-null     float64\n",
      " 12  act_2018_average_english_score          51 non-null     float64\n",
      " 13  act_2018_average_math_score             51 non-null     float64\n",
      " 14  act_2018_average_reading_score          51 non-null     float64\n",
      " 15  act_2018_average_science_score          51 non-null     float64\n",
      " 16  sat_2018_participation                  51 non-null     int64  \n",
      " 17  sat_2018_reading_and_writing            51 non-null     int64  \n",
      " 18  sat_2018_math                           51 non-null     int64  \n",
      " 19  sat_2018_total                          51 non-null     int64  \n",
      "dtypes: float64(10), int64(10)\n",
      "memory usage: 10.9+ KB\n"
     ]
    }
   ],
   "source": [
    "final.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "final.to_csv('../project_1/data/final.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis\n",
    "\n",
    "\n",
    "### Summary Statistics\n",
    "Transpose the output of pandas `describe` method to create a quick overview of each numeric feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>act_2017_participation</th>\n",
       "      <td>51.0</td>\n",
       "      <td>65.254902</td>\n",
       "      <td>32.140842</td>\n",
       "      <td>8.0</td>\n",
       "      <td>31.00</td>\n",
       "      <td>69.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2017_english</th>\n",
       "      <td>51.0</td>\n",
       "      <td>20.931373</td>\n",
       "      <td>2.353677</td>\n",
       "      <td>16.3</td>\n",
       "      <td>19.00</td>\n",
       "      <td>20.7</td>\n",
       "      <td>23.30</td>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2017_math</th>\n",
       "      <td>51.0</td>\n",
       "      <td>21.182353</td>\n",
       "      <td>1.981989</td>\n",
       "      <td>18.0</td>\n",
       "      <td>19.40</td>\n",
       "      <td>20.9</td>\n",
       "      <td>23.10</td>\n",
       "      <td>25.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2017_reading</th>\n",
       "      <td>51.0</td>\n",
       "      <td>22.013725</td>\n",
       "      <td>2.067271</td>\n",
       "      <td>18.1</td>\n",
       "      <td>20.45</td>\n",
       "      <td>21.8</td>\n",
       "      <td>24.15</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2017_science</th>\n",
       "      <td>51.0</td>\n",
       "      <td>21.450980</td>\n",
       "      <td>1.739353</td>\n",
       "      <td>18.2</td>\n",
       "      <td>19.95</td>\n",
       "      <td>21.3</td>\n",
       "      <td>23.20</td>\n",
       "      <td>24.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2017_composite</th>\n",
       "      <td>51.0</td>\n",
       "      <td>21.519608</td>\n",
       "      <td>2.020695</td>\n",
       "      <td>17.8</td>\n",
       "      <td>19.80</td>\n",
       "      <td>21.4</td>\n",
       "      <td>23.60</td>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <td>51.0</td>\n",
       "      <td>39.803922</td>\n",
       "      <td>35.276632</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>38.0</td>\n",
       "      <td>66.00</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2017_reading_and_writing</th>\n",
       "      <td>51.0</td>\n",
       "      <td>569.117647</td>\n",
       "      <td>45.666901</td>\n",
       "      <td>482.0</td>\n",
       "      <td>533.50</td>\n",
       "      <td>559.0</td>\n",
       "      <td>613.00</td>\n",
       "      <td>644.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2017_math</th>\n",
       "      <td>51.0</td>\n",
       "      <td>556.882353</td>\n",
       "      <td>47.121395</td>\n",
       "      <td>468.0</td>\n",
       "      <td>523.50</td>\n",
       "      <td>548.0</td>\n",
       "      <td>599.00</td>\n",
       "      <td>651.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2017_total</th>\n",
       "      <td>51.0</td>\n",
       "      <td>1126.098039</td>\n",
       "      <td>92.494812</td>\n",
       "      <td>950.0</td>\n",
       "      <td>1055.50</td>\n",
       "      <td>1107.0</td>\n",
       "      <td>1212.00</td>\n",
       "      <td>1295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2018_percentage_of_students_tested</th>\n",
       "      <td>51.0</td>\n",
       "      <td>61.647059</td>\n",
       "      <td>34.080976</td>\n",
       "      <td>7.0</td>\n",
       "      <td>28.50</td>\n",
       "      <td>66.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2018_average_composite_score</th>\n",
       "      <td>51.0</td>\n",
       "      <td>21.486275</td>\n",
       "      <td>2.106278</td>\n",
       "      <td>17.7</td>\n",
       "      <td>19.95</td>\n",
       "      <td>21.3</td>\n",
       "      <td>23.55</td>\n",
       "      <td>25.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2018_average_english_score</th>\n",
       "      <td>51.0</td>\n",
       "      <td>20.988235</td>\n",
       "      <td>2.446356</td>\n",
       "      <td>16.6</td>\n",
       "      <td>19.10</td>\n",
       "      <td>20.2</td>\n",
       "      <td>23.70</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2018_average_math_score</th>\n",
       "      <td>51.0</td>\n",
       "      <td>21.125490</td>\n",
       "      <td>2.035765</td>\n",
       "      <td>17.8</td>\n",
       "      <td>19.40</td>\n",
       "      <td>20.7</td>\n",
       "      <td>23.15</td>\n",
       "      <td>25.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2018_average_reading_score</th>\n",
       "      <td>51.0</td>\n",
       "      <td>22.015686</td>\n",
       "      <td>2.167245</td>\n",
       "      <td>18.0</td>\n",
       "      <td>20.45</td>\n",
       "      <td>21.6</td>\n",
       "      <td>24.10</td>\n",
       "      <td>26.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>act_2018_average_science_score</th>\n",
       "      <td>51.0</td>\n",
       "      <td>21.345098</td>\n",
       "      <td>1.870114</td>\n",
       "      <td>17.9</td>\n",
       "      <td>19.85</td>\n",
       "      <td>21.1</td>\n",
       "      <td>23.05</td>\n",
       "      <td>24.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2018_participation</th>\n",
       "      <td>51.0</td>\n",
       "      <td>45.745098</td>\n",
       "      <td>37.314256</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>52.0</td>\n",
       "      <td>77.50</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2018_reading_and_writing</th>\n",
       "      <td>51.0</td>\n",
       "      <td>563.686275</td>\n",
       "      <td>47.502627</td>\n",
       "      <td>480.0</td>\n",
       "      <td>534.50</td>\n",
       "      <td>552.0</td>\n",
       "      <td>610.50</td>\n",
       "      <td>643.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2018_math</th>\n",
       "      <td>51.0</td>\n",
       "      <td>556.235294</td>\n",
       "      <td>47.772623</td>\n",
       "      <td>480.0</td>\n",
       "      <td>522.50</td>\n",
       "      <td>544.0</td>\n",
       "      <td>593.50</td>\n",
       "      <td>655.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sat_2018_total</th>\n",
       "      <td>51.0</td>\n",
       "      <td>1120.019608</td>\n",
       "      <td>94.155083</td>\n",
       "      <td>977.0</td>\n",
       "      <td>1057.50</td>\n",
       "      <td>1098.0</td>\n",
       "      <td>1204.00</td>\n",
       "      <td>1298.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        count         mean        std    min  \\\n",
       "act_2017_participation                   51.0    65.254902  32.140842    8.0   \n",
       "act_2017_english                         51.0    20.931373   2.353677   16.3   \n",
       "act_2017_math                            51.0    21.182353   1.981989   18.0   \n",
       "act_2017_reading                         51.0    22.013725   2.067271   18.1   \n",
       "act_2017_science                         51.0    21.450980   1.739353   18.2   \n",
       "act_2017_composite                       51.0    21.519608   2.020695   17.8   \n",
       "sat_2017_participation                   51.0    39.803922  35.276632    2.0   \n",
       "sat_2017_reading_and_writing             51.0   569.117647  45.666901  482.0   \n",
       "sat_2017_math                            51.0   556.882353  47.121395  468.0   \n",
       "sat_2017_total                           51.0  1126.098039  92.494812  950.0   \n",
       "act_2018_percentage_of_students_tested   51.0    61.647059  34.080976    7.0   \n",
       "act_2018_average_composite_score         51.0    21.486275   2.106278   17.7   \n",
       "act_2018_average_english_score           51.0    20.988235   2.446356   16.6   \n",
       "act_2018_average_math_score              51.0    21.125490   2.035765   17.8   \n",
       "act_2018_average_reading_score           51.0    22.015686   2.167245   18.0   \n",
       "act_2018_average_science_score           51.0    21.345098   1.870114   17.9   \n",
       "sat_2018_participation                   51.0    45.745098  37.314256    2.0   \n",
       "sat_2018_reading_and_writing             51.0   563.686275  47.502627  480.0   \n",
       "sat_2018_math                            51.0   556.235294  47.772623  480.0   \n",
       "sat_2018_total                           51.0  1120.019608  94.155083  977.0   \n",
       "\n",
       "                                            25%     50%      75%     max  \n",
       "act_2017_participation                    31.00    69.0   100.00   100.0  \n",
       "act_2017_english                          19.00    20.7    23.30    25.5  \n",
       "act_2017_math                             19.40    20.9    23.10    25.3  \n",
       "act_2017_reading                          20.45    21.8    24.15    26.0  \n",
       "act_2017_science                          19.95    21.3    23.20    24.9  \n",
       "act_2017_composite                        19.80    21.4    23.60    25.5  \n",
       "sat_2017_participation                     4.00    38.0    66.00   100.0  \n",
       "sat_2017_reading_and_writing             533.50   559.0   613.00   644.0  \n",
       "sat_2017_math                            523.50   548.0   599.00   651.0  \n",
       "sat_2017_total                          1055.50  1107.0  1212.00  1295.0  \n",
       "act_2018_percentage_of_students_tested    28.50    66.0   100.00   100.0  \n",
       "act_2018_average_composite_score          19.95    21.3    23.55    25.6  \n",
       "act_2018_average_english_score            19.10    20.2    23.70    26.0  \n",
       "act_2018_average_math_score               19.40    20.7    23.15    25.2  \n",
       "act_2018_average_reading_score            20.45    21.6    24.10    26.1  \n",
       "act_2018_average_science_score            19.85    21.1    23.05    24.9  \n",
       "sat_2018_participation                     4.50    52.0    77.50   100.0  \n",
       "sat_2018_reading_and_writing             534.50   552.0   610.50   643.0  \n",
       "sat_2018_math                            522.50   544.0   593.50   655.0  \n",
       "sat_2018_total                          1057.50  1098.0  1204.00  1298.0  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.describe().transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Manually calculate standard deviation\n",
    "\n",
    "$$\\sigma = \\sqrt{\\frac{1}{n}\\sum_{i=1}^n(x_i - \\mu)^2}$$\n",
    "\n",
    "- Write a function to calculate standard deviation using the formula above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.14084201588683"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def standard_deviation(col):\n",
    "    sum_values = 0\n",
    "    mean = final[col].mean()\n",
    "\n",
    "    for value in final[col]:\n",
    "        # Calculate sum of squared distance from each data point to the mean\n",
    "        sum_values += (value - mean) ** 2\n",
    "\n",
    "    # The index is counted as an extra row, hence len - 1\n",
    "    return (sum_values/(len(final[col]) - 1)) ** 0.5\n",
    "\n",
    "standard_deviation('act_2017_participation')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Use a **dictionary comprehension** to apply your standard deviation function to each numeric column in the dataframe.  **No loops**  \n",
    "- Assign the output to variable `sd` as a dictionary where: \n",
    "    - Each column name is now a key \n",
    "    - That standard deviation of the column is the value \n",
    "     \n",
    "*Example Output :* `{'act_2017_Math': 120, 'act_2017_Reading': 120, ...}`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'act_2017_participation': 32.14084201588683,\n",
       " 'act_2017_english': 2.35367713980303,\n",
       " 'act_2017_math': 1.9819894936505533,\n",
       " 'act_2017_reading': 2.0672706264873146,\n",
       " 'act_2017_science': 1.7393530462812443,\n",
       " 'act_2017_composite': 2.020694891154341,\n",
       " 'sat_2017_participation': 35.276632270013046,\n",
       " 'sat_2017_reading_and_writing': 45.66690138768932,\n",
       " 'sat_2017_math': 47.12139516560329,\n",
       " 'sat_2017_total': 92.49481172519046,\n",
       " 'act_2018_percentage_of_students_tested': 34.08097623567245,\n",
       " 'act_2018_average_composite_score': 2.1062781969951776,\n",
       " 'act_2018_average_english_score': 2.4463562339793055,\n",
       " 'act_2018_average_math_score': 2.035764538177723,\n",
       " 'act_2018_average_reading_score': 2.1672445684804105,\n",
       " 'act_2018_average_science_score': 1.8701137639716146,\n",
       " 'sat_2018_participation': 37.31425633039196,\n",
       " 'sat_2018_reading_and_writing': 47.50262737831599,\n",
       " 'sat_2018_math': 47.77262322095955,\n",
       " 'sat_2018_total': 94.15508275097599}"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sd = {col: standard_deviation(col) for col in final.columns}\n",
    "sd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'act_2017_participation': 31.824175751231806,\n",
       " 'act_2017_english': 2.3304876369363363,\n",
       " 'act_2017_math': 1.9624620273436781,\n",
       " 'act_2017_reading': 2.0469029314842646,\n",
       " 'act_2017_science': 1.7222161451443676,\n",
       " 'act_2017_composite': 2.000786081581989,\n",
       " 'sat_2017_participation': 34.92907076664508,\n",
       " 'sat_2017_reading_and_writing': 45.21697020437866,\n",
       " 'sat_2017_math': 46.65713364485503,\n",
       " 'sat_2017_total': 91.58351056778743,\n",
       " 'act_2018_percentage_of_students_tested': 33.745194881997506,\n",
       " 'act_2018_average_composite_score': 2.0855261815801147,\n",
       " 'act_2018_average_english_score': 2.4222536143202795,\n",
       " 'act_2018_average_math_score': 2.015707255555717,\n",
       " 'act_2018_average_reading_score': 2.145891884510421,\n",
       " 'act_2018_average_science_score': 1.8516885484833543,\n",
       " 'sat_2018_participation': 36.946619223539415,\n",
       " 'sat_2018_reading_and_writing': 47.03460978357609,\n",
       " 'sat_2018_math': 47.30194550378352,\n",
       " 'sat_2018_total': 93.22742384464433}"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sd_2 = {col: np.std(final[col]) for col in final.columns}\n",
    "sd_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do your manually calculated standard deviations match up with the output from pandas `describe`? What about numpy's `std` method?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas - yes. Numpy - no, as it counts the extra row (i.e. the state index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Investigate trends in the data\n",
    "Using sorting and/or masking (along with the `.head` method to not print our entire dataframe), consider the following questions:\n",
    "\n",
    "- Which states have the highest and lowest participation rates for the:\n",
    "    - 2017 SAT?\n",
    "    - 2018 SAT?\n",
    "    - 2017 ACT?\n",
    "    - 2018 ACT?\n",
    "\n",
    "- Which states have the highest and lowest mean total/composite scores for the:\n",
    "    - 2017 SAT?\n",
    "    - 2018 SAT?\n",
    "    - 2017 ACT?\n",
    "    - 2018 ACT?\n",
    "\n",
    "- Do any states with 100% participation on a given test have a rate change year-to-year?\n",
    "- Do any states show have >50% participation on *both* tests either year?\n",
    "\n",
    "Based on what you've just observed, have you identified any states that you're especially interested in? **Make a note of these and state *why* you think they're interesting**.\n",
    "\n",
    "**You should comment on your findings at each step in a markdown cell below your code block**. Make sure you include at least one example of sorting your dataframe by a column, and one example of using boolean filtering (i.e., masking) to select a subset of the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['act_2017_participation', 'act_2017_english', 'act_2017_math',\n",
       "       'act_2017_reading', 'act_2017_science', 'act_2017_composite',\n",
       "       'sat_2017_participation', 'sat_2017_reading_and_writing',\n",
       "       'sat_2017_math', 'sat_2017_total',\n",
       "       'act_2018_percentage_of_students_tested',\n",
       "       'act_2018_average_composite_score', 'act_2018_average_english_score',\n",
       "       'act_2018_average_math_score', 'act_2018_average_reading_score',\n",
       "       'act_2018_average_science_score', 'sat_2018_participation',\n",
       "       'sat_2018_reading_and_writing', 'sat_2018_math', 'sat_2018_total'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2017_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>District of Columbia</th>\n",
       "      <td>950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delaware</th>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idaho</th>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michigan</th>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maine</th>\n",
       "      <td>1012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      sat_2017_total\n",
       "state                               \n",
       "District of Columbia             950\n",
       "Delaware                         996\n",
       "Idaho                           1005\n",
       "Michigan                        1005\n",
       "Maine                           1012"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lowest SAT scores in 2017\n",
    "final[['sat_2017_total']].sort_values('sat_2017_total').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Lowest SAT scores in 2017: Washington DC, Delaware, Idaho, Michigan, Maine "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2017_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Minnesota</th>\n",
       "      <td>1295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wisconsin</th>\n",
       "      <td>1291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iowa</th>\n",
       "      <td>1275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Missouri</th>\n",
       "      <td>1271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas</th>\n",
       "      <td>1260</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           sat_2017_total\n",
       "state                    \n",
       "Minnesota            1295\n",
       "Wisconsin            1291\n",
       "Iowa                 1275\n",
       "Missouri             1271\n",
       "Kansas               1260"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Highest SAT scores in 2017\n",
    "final[['sat_2017_total']].sort_values('sat_2017_total', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Highest SAT scores in 2017: Minnesota, Wisconsin, Iowa, Missouri, Kansas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2018_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>District of Columbia</th>\n",
       "      <td>977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delaware</th>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Virginia</th>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idaho</th>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utah</th>\n",
       "      <td>1010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      sat_2018_total\n",
       "state                               \n",
       "District of Columbia             977\n",
       "Delaware                         998\n",
       "West Virginia                    999\n",
       "Idaho                           1001\n",
       "Utah                            1010"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lowest SAT scores in 2018\n",
    "final[['sat_2018_total']].sort_values('sat_2018_total').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Lowest SAT scores in 2018: Washington DC, Delaware, West VA, Idaho, Utah "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2018_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Minnesota</th>\n",
       "      <td>1298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wisconsin</th>\n",
       "      <td>1294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Dakota</th>\n",
       "      <td>1283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iowa</th>\n",
       "      <td>1265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas</th>\n",
       "      <td>1265</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              sat_2018_total\n",
       "state                       \n",
       "Minnesota               1298\n",
       "Wisconsin               1294\n",
       "North Dakota            1283\n",
       "Iowa                    1265\n",
       "Kansas                  1265"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Highest SAT scores in 2018\n",
    "final[['sat_2018_total']].sort_values('sat_2018_total', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Highest SAT scores in 2017: Minnesota, Wisconsin, North Dakota, Iowa, Kansas "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2017_composite</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Nevada</th>\n",
       "      <td>17.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mississippi</th>\n",
       "      <td>18.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Carolina</th>\n",
       "      <td>18.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hawaii</th>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North Carolina</th>\n",
       "      <td>19.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                act_2017_composite\n",
       "state                             \n",
       "Nevada                        17.8\n",
       "Mississippi                   18.6\n",
       "South Carolina                18.7\n",
       "Hawaii                        19.0\n",
       "North Carolina                19.1"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lowest ACT scores in 2017\n",
    "final[['act_2017_composite']] \\\n",
    ".sort_values('act_2017_composite').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Lowest ACT scores in 2017: Nevada, Mississipi, South Carolina, Hawaii, North Carolina "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2017_composite</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>New Hampshire</th>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Massachusetts</th>\n",
       "      <td>25.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Connecticut</th>\n",
       "      <td>25.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maine</th>\n",
       "      <td>24.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>District of Columbia</th>\n",
       "      <td>24.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      act_2017_composite\n",
       "state                                   \n",
       "New Hampshire                       25.5\n",
       "Massachusetts                       25.4\n",
       "Connecticut                         25.2\n",
       "Maine                               24.3\n",
       "District of Columbia                24.2"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Highest ACT scores in 2017\n",
    "final[['act_2017_composite']] \\\n",
    ".sort_values('act_2017_composite', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Highest ACT scores in 2017: New Hampshire, MA, Connecticut, Maine, Washington DC "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2018_average_composite_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Nevada</th>\n",
       "      <td>17.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Carolina</th>\n",
       "      <td>18.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mississippi</th>\n",
       "      <td>18.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hawaii</th>\n",
       "      <td>18.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>19.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                act_2018_average_composite_score\n",
       "state                                           \n",
       "Nevada                                      17.7\n",
       "South Carolina                              18.3\n",
       "Mississippi                                 18.6\n",
       "Hawaii                                      18.9\n",
       "Alabama                                     19.1"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lowest ACT scores in 2018\n",
    "final[['act_2018_average_composite_score']].sort_values('act_2018_average_composite_score').head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Lowest ACT scores in 2018: Nevada, Mississipi, South Carolina, Hawaii, North Carolina "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2018_average_composite_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Connecticut</th>\n",
       "      <td>25.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Massachusetts</th>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Hampshire</th>\n",
       "      <td>25.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New York</th>\n",
       "      <td>24.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michigan</th>\n",
       "      <td>24.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               act_2018_average_composite_score\n",
       "state                                          \n",
       "Connecticut                                25.6\n",
       "Massachusetts                              25.5\n",
       "New Hampshire                              25.1\n",
       "New York                                   24.5\n",
       "Michigan                                   24.4"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Highest ACT scores in 2018\n",
    "final[['act_2018_average_composite_score']] \\\n",
    ".sort_values('act_2018_average_composite_score', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Highest ACT scores in 2018: Connecticut, MA, New Hampshire, New York, Michigan "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for rate change between years for SAT test\n",
    "sat_2017_rate = final[(final['sat_2017_participation'] == 100) & (final['sat_2018_participation'] != 100)] \\\n",
    "[['sat_2017_participation', 'sat_2018_participation']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for rate change between years for SAT test\n",
    "sat_2018_rate = final[(final['sat_2018_participation'] == 100) & (final['sat_2017_participation'] != 100)] \\\n",
    "[['sat_2017_participation', 'sat_2018_participation']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <th>sat_2018_participation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>District of Columbia</th>\n",
       "      <td>100</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Colorado</th>\n",
       "      <td>11</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idaho</th>\n",
       "      <td>93</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      sat_2017_participation  sat_2018_participation\n",
       "state                                                               \n",
       "District of Columbia                     100                      92\n",
       "Colorado                                  11                     100\n",
       "Idaho                                     93                     100"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frames = [sat_2017_rate, sat_2018_rate]\n",
    "result = pd.concat(frames)\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  DC's SAT participation rate dropped from 100% to 92% from 2017 to 2018. Idaho's SAT participation rate dropped slightly from 2017 to 2018. Interestingly, Colorado had a massive jump in their SAT participation rate from 2017 to 2018.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for rate change between years for ACT test\n",
    "act_2017_rate = final[(final['act_2017_participation'] == 100) & (final['act_2018_percentage_of_students_tested'] != 100)] \\\n",
    "[['act_2017_participation', 'act_2018_percentage_of_students_tested']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for rate change between years for ACT test\n",
    "act_2018_rate = final[(final['act_2017_participation'] != 100) & (final['act_2018_percentage_of_students_tested'] == 100)] \\\n",
    "[['act_2017_participation', 'act_2018_percentage_of_students_tested']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>act_2017_participation</th>\n",
       "      <th>act_2018_percentage_of_students_tested</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Colorado</th>\n",
       "      <td>100</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Minnesota</th>\n",
       "      <td>100</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nebraska</th>\n",
       "      <td>84</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ohio</th>\n",
       "      <td>75</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           act_2017_participation  act_2018_percentage_of_students_tested\n",
       "state                                                                    \n",
       "Colorado                      100                                      30\n",
       "Minnesota                     100                                      99\n",
       "Nebraska                       84                                     100\n",
       "Ohio                           75                                     100"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frames = [act_2017_rate, act_2018_rate]\n",
    "result = pd.concat(frames)\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Colorado's ACT participation rate dropped massively from 2017 to 2018, while Minnesota's participation rate experienced a very slight dip. Nebraska and Ohio both increased their ACT participation rates from 2017 to 2018 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2017_participation</th>\n",
       "      <th>act_2017_participation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hawaii</th>\n",
       "      <td>55</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Georgia</th>\n",
       "      <td>61</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Florida</th>\n",
       "      <td>83</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         sat_2017_participation  act_2017_participation\n",
       "state                                                  \n",
       "Hawaii                       55                      90\n",
       "Georgia                      61                      55\n",
       "Florida                      83                      73"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for cases where participation rates is greater than 50% for both tests in 2017\n",
    "final[(final['sat_2017_participation'] > 50) & (final['act_2017_participation'] > 50)] \\\n",
    "        [['sat_2017_participation', 'act_2017_participation']] \\\n",
    "        .sort_values('sat_2017_participation')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sat_2018_participation</th>\n",
       "      <th>act_2018_percentage_of_students_tested</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>North Carolina</th>\n",
       "      <td>52</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Carolina</th>\n",
       "      <td>55</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Florida</th>\n",
       "      <td>56</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hawaii</th>\n",
       "      <td>56</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Georgia</th>\n",
       "      <td>70</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                sat_2018_participation  act_2018_percentage_of_students_tested\n",
       "state                                                                         \n",
       "North Carolina                      52                                     100\n",
       "South Carolina                      55                                     100\n",
       "Florida                             56                                      66\n",
       "Hawaii                              56                                      89\n",
       "Georgia                             70                                      53"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for cases where participation rates is greater than 50% for both tests in 2018\n",
    "final[(final['sat_2018_participation'] > 50) & (final['act_2018_percentage_of_students_tested'] > 50)] \\\n",
    "        [['sat_2018_participation', 'act_2018_percentage_of_students_tested']] \\\n",
    "        .sort_values(by='sat_2018_participation')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Flordia, Hawaii and Georgia had greater than 50% participation rates for both tests in 2017 and 2018. Hawaii is a particularly interesting state as it seems to be an outlier -- the other states are all in the Southern US and run by republican governments, which could lead to similarities in educational policy. This would explain why they have similar participation rates for both tests. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize the data\n",
    "\n",
    "There's not a magic bullet recommendation for the right number of plots to understand a given dataset, but visualizing your data is *always* a good idea. Not only does it allow you to quickly convey your findings (even if you have a non-technical audience), it will often reveal trends in your data that escaped you when you were looking only at numbers.\n",
    "\n",
    "Some recommendations on plotting:\n",
    "- Plots have titles\n",
    "- Plots have axis labels\n",
    "- Plots have appropriate tick labels\n",
    "- All text is legible in a plot\n",
    "- Plots demonstrate meaningful and valid relationships\n",
    "- Plots are interpreted to aid understanding\n",
    "\n",
    "There is such a thing as too many plots, and there are a *lot* of bad plots. You might make some! (But hopefully not with the guided prompts below)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Use Seaborn's heatmap with pandas `.corr()` to visualize correlations between all numeric features\n",
    "\n",
    "Heatmaps are generally not appropriate for presentations, and should often be excluded from reports as they can be visually overwhelming. **However**, they can be extremely useful in identify relationships of potential interest (as well as identifying potential collinearity before modeling).\n",
    "\n",
    "*example*:\n",
    "```python\n",
    "sns.heatmap(df.corr())\n",
    "```\n",
    "\n",
    "Please take time to format your output, adding a title. Look through some of the additional arguments and options. (Axis labels aren't really necessary, as long as the title is informative)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21a908bfc40>"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "plt.title('Heatmap between numeric features of ACT and SAT in 2017 and 2018')\n",
    "sns.heatmap(final.corr(), cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Unsurprsingly, the scores from either test in 2017 have a strong correlation with the scores with the same test in 2018. \n",
    "\n",
    "ACT participation rates have a strong negative correlation with SAT particpation rates, suggesting that states tend to choose one test over the other."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define a custom function to subplot histograms\n",
    "\n",
    "We have data for two tests for two years. We only have composite (and not subtest scores) for the 2018 act_2017. We should write a function that will take the names of 2+ columns and subplot histograms. While you can use pandas plotting or Seaborn here, matplotlib gives you greater control over all aspects of your plots.\n",
    "\n",
    "[Helpful Link for Plotting Multiple Figures](https://matplotlib.org/users/pyplot_tutorial.html#working-with-multiple-figures-and-axes)\n",
    "\n",
    "Here's some starter code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "def subplot_histograms(dataframe, list_of_columns, list_of_titles, list_of_xlabels):\n",
    "    nrows = int(np.ceil(len(list_of_columns)/2)) # Makes sure you have enough rows\n",
    "    fig, ax = plt.subplots(nrows=nrows, ncols=2, figsize=(10,6)) # You'll want to specify your figsize\n",
    "    ax = ax.ravel() # Ravel turns a matrix into a vector, which is easier to iterate\n",
    "    for i, column in enumerate(list_of_columns): # Gives us an index value to get into all our lists\n",
    "        ax[i].hist(dataframe[column]) # feel free to add more settings\n",
    "        ax[i].set_title(list_of_titles[i])\n",
    "        ax[i].set_xlabel(list_of_xlabels[i])\n",
    "    \n",
    "    fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot and interpret histograms \n",
    "For each of the following:\n",
    "- Participation rates for SAT & ACT\n",
    "- Math scores for SAT & ACT\n",
    "- Reading/verbal scores for SAT & ACT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['act_2017_participation', 'act_2017_english', 'act_2017_math',\n",
       "       'act_2017_reading', 'act_2017_science', 'act_2017_composite',\n",
       "       'sat_2017_participation', 'sat_2017_reading_and_writing',\n",
       "       'sat_2017_math', 'sat_2017_total',\n",
       "       'act_2018_percentage_of_students_tested',\n",
       "       'act_2018_average_composite_score', 'act_2018_average_english_score',\n",
       "       'act_2018_average_math_score', 'act_2018_average_reading_score',\n",
       "       'act_2018_average_science_score', 'sat_2018_participation',\n",
       "       'sat_2018_reading_and_writing', 'sat_2018_math', 'sat_2018_total'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsgAAAGoCAYAAABbtxOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3debgkZXn///cnM25sgjIatmHcjZKgOK4Q9CduiAomGsENxDgxccEtZozfRGOWL67RJP40xAVUBBXxcsEFohI3tgHZB8HIKDujhGWIBoH7+0fVhPJwtjnd53T1mffruvo63VVP13N3Tc197vPU01WpKiRJkiQ1fmvUAUiSJEl9YoEsSZIkdVggS5IkSR0WyJIkSVKHBbIkSZLUYYEsSZIkdVggS3OQ5MgkfzfqOCRpc2Ue1nyyQN6MJNkryQ+S3JDkuiTfT/LoCW22TLIhyVc7yy5ol21IcluSX3Ve/+Uk/Ryc5MwkNya5PMm7kiztrL9Xki8kuTnJT5O8sLPurkmOS7IuSSV50oRtf63T94YktyQ5b4rPu6LdxlkTlm/fvm/dLPfbIUm+N5u202zj5UkuSnJTkmuSnJBk60G2KWn8LJI8fLckH25z2XVJvpxkpyk+r3lYY8kCeTORZBvgK8A/A/cCdgL+BvifCU2f1y57WpIdAKrq4VW1VVVtBXwXePXG11X1D5N0twXwOmB74LHAPsCbOus/CNwC3Bd4EfChJA/vrP8e8GLg6okbrqp9O31vBfwA+NwMH3/LJLt1Xr8QuHSG9wxNkicC/wAcVFVbA78DfHbIfSyduZWkUVoseRg4DHg88HvAjsD17WeajnlYY8UCefPxYICqOqaqbquqX1bViVV17oR2BwMfBs6lSZqbrKo+VFXfrapbquoK4GhgT2hGRoA/BP6qqjZU1feALwEvad97S1W9v11+23T9JFkB/D7wyRlC+mT7uTZ6KfCJCdtaneQ/25GFC5M8t13+OzT74/HtSM31nbdt145A3JTktCQPmKL/RwOnVNUP2894XVUdVVU3tX3cI8l721GcG5J8L8k92nXPaUeOrk9ychvPxpjXJfmLJOcCNydZmuRx7ejU9UnO6Y78tCMwP2njvTTJnP59Jc3ZYsnD9wO+UVXXVNWvgGOBh0/Srss8jHl4nFggbz4uBm5LclSSfZNsN7FBkuXAk2gS6dE0CWwY9gYuaJ8/GLitqi7urD+HmZPrZF4KfLeqZhqF+BRwYJIlbWLbGjhtQpv/pCm270kzovOpJDtU1VrglTSJdauq2rbznoPattsBPwb+for+TwOenuRvkuyZ5G4T1r8HeBTwBJpRpTcDtyd5MHAMzSjQMuCrwJeT3HVCDPsB29KMBJ0A/F27nTcBn0+yrP2F+E/Avu3oyROAs6fda5KGbbHk4Y8CeybZMckWNEX812Z4j3nYPDxWLJA3E1V1I7AXUMC/AeuTfCnJfTvNXgqcW1UX0iSEhyd55CD9JnkZsJIm+QBsBdwwodkNNMlyU70UOHIW7S4HfgQ8hWYE4xMTG1TV56rqyqq6vao+A1wCPGaG7R5fVadX1a00v8geMVmjqvou8AfAHjSJ8xdJ3tf+ovgt4FDgsKq6oh1V+kFV/Q/wAuCEqjqpqn5Nsw/vQZNUN/qnqrqsqn5Jczr0q1X11fZznASsAZ7Ztr0d2C3JParqqqq6AEkLZhHl4YuBnwFXADfSTFd4xwzvMQ83zMNjwgJ5M1JVa6vqkKraGdiNZu7Y+ztNXkqTYKiqK4H/4DdPiW2SJAcAh9P8tfzzdvEGYJsJTbcBbtrEbe8F/DZw3Czf8gngEJq/9D81yfZemuTs9pTY9TT7Z/sZttmdm/ffNL90JlVVX6uqZ9OMKOzfxvLHbR93pxk5mWhH4KedbdwOXEYzb3GjyzrPdwWev/EztJ9jL2CHqrqZJtG/EriqPSX50Bk+n6QhWyR5+EM0eevewJbA8cw8ggzmYfPwGLFA3kxV1UU0o6+7ASR5AvAg4C1Jrk5yNc0XOw7KHL54kOQZNCMkz66q7lUmLgaWJnlQZ9nu3HHqb7YOphk52DDL9p+nOQX2k6r6aXdFkl3bWF8N3Ls9fXc+kLZJbWJsU2pHFL4JfItm3/8c+BUw2by5K2mS7cY4A+xCM2rzv5vsPL8M+GRVbdt5bFlVh7d9f6OqngrsAFxE85kljcgY5+HdgSPbebz/Q/MFvcckmamYNQ+bh8eGBfJmIslDk7wxyc7t611o/oo/tW1yMHAS8DCaU1SPoEkcWwD7bmJfT6YZAfnDqjq9u679C/p44B1pLmW0J81f8p/svP9uSe7evrxrkru3SWnj+nsAz2d20yu6/T6ZZrRgoi1pEtz6dvsvo/2F1boG2HnCnLNZS7J/kgOTbJfGY4AnAqe2oxEfA97XzudbkuTx7fy4zwL7JdknyV2AN9J8s/0HU3T1KeDZSZ7ebufuSZ6UZOck903zRZMt221sYIYvQUoarkWUh88AXprknm1u+jPgys4I9aTMw+bhcWKBvPm4iWYk4rQkN9Mk5POBN7ZJ8I+Af66qqzuPS7nzN49n469ovmTx1dxxnc7u6bc/o5nDdS3NHLs/nTAP60fAL2lOYX2jfb5rZ/0BNPPlvr0pQVXVmqq60ym0dq7fe4FTaJLw7wLf7zT5Fs3IytVJpv0FMIX/Al5BM5/uRpoE+u6qOrpd/ybgPJpfOtcB7wR+q6p+RDOf7Z9pRjieTTMSdMsUn+8yml9yf0nzS+Yy4M9p/p//Fk1iv7Lt44k0/w6SFs5iycNvohlxvYQm1zwTeO5sgjIPm4fHRaqGdtZCkiRJGnuOIEuSJEkdFsiSJElShwWyJEmS1GGBLEmSJHVs8nUVB7H99tvXihUrFrJLSeqlM8888+dVtWwUfZuLJakxVS5e0AJ5xYoVrFmzZiG7lKReSvLTmVvND3OxJDWmysVOsZAkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkjgW9zJv6a8XqE0bS77rD9xtJv5LUR6PIxeZh6c4cQZYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqWPGAjnJx5Jcm+T8zrJ3J7koyblJvpBk2/kNU5IkSVoYsxlBPhJ4xoRlJwG7VdXvARcDbxlyXJIkSdJIzFggV9V3gOsmLDuxqm5tX54K7DwPsUmSWlOczbtXkpOSXNL+3G6UMUrSYjGMOciHAl+bamWSVUnWJFmzfv36IXQnSZulI7nz2bzVwDer6kHAN9vXkqQBDVQgJ3krcCtw9FRtquqIqlpZVSuXLVs2SHeStNma7GwesD9wVPv8KOCABQ1KkhappXN9Y5KDgWcB+1RVDS8kSdIs3beqrgKoqquS3GeqhklWAasAli9fvkDhSdJ4mtMIcpJnAH8BPKeq/nu4IUmShs2zeZI0e7O5zNsxwCnAQ5JcnuTlwL8AWwMnJTk7yYfnOU5J0p1dk2QHgPbntSOOR5IWhRmnWFTVQZMs/ug8xCJJ2jRfAg4GDm9/fnG04UjS4uCd9CRpDExxNu9w4KlJLgGe2r6WJA1ozl/SkyQtnCnO5gHss6CBSNJmwBFkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6ZiyQk3wsybVJzu8su1eSk5Jc0v7cbn7DlCRJkhbGbEaQjwSeMWHZauCbVfUg4Jvta0mSJGnszVggV9V3gOsmLN4fOKp9fhRwwJDjkiRJkkZirnOQ71tVVwG0P+8zVcMkq5KsSbJm/fr1c+xOkiRJWhjz/iW9qjqiqlZW1cply5bNd3eSJEnSQOZaIF+TZAeA9ue1wwtJkiRJGp25FshfAg5unx8MfHE44UiSNlWS1ye5IMn5SY5JcvdRxyRJ42w2l3k7BjgFeEiSy5O8HDgceGqSS4Cntq8lSQssyU7Aa4GVVbUbsAQ4cLRRSdJ4WzpTg6o6aIpV+ww5FknS3CwF7pHk18AWwJUjjkeSxtqMBbIkqb+q6ook7wF+BvwSOLGqTpzYLskqYBXA8uXLFzbIMbRi9QmjDkHSCHmraUkaY+2dTPcH7gfsCGyZ5MUT23lFIUmaPQtkSRpvTwEurar1VfVr4HjgCSOOSZLGmgWyJI23nwGPS7JFktB8P2TtiGOSpLFmgSxJY6yqTgOOA84CzqPJ60eMNChJGnN+SU+SxlxVvQ1426jjkKTFwhFkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6BiqQk7w+yQVJzk9yTJK7DyswSZIkaRTmXCAn2Ql4LbCyqnYDlgAHDiswSZIkaRQGnWKxFLhHkqXAFsCVg4ckSZIkjc6cC+SqugJ4D/Az4Crghqo6cViBSZIkSaMwyBSL7YD9gfsBOwJbJnnxJO1WJVmTZM369evnHqkkSZK0AAaZYvEU4NKqWl9VvwaOB54wsVFVHVFVK6tq5bJlywboTpIkSZp/gxTIPwMel2SLJAH2AdYOJyxJkiRpNAaZg3wacBxwFnBeu60jhhSXJEmSNBJLB3lzVb0NeNuQYpEkSZJGzjvpSZIkSR0WyJIkSVKHBbIkjbkk2yY5LslFSdYmefyoY5KkcTbQHGRJUi98APh6VT0vyV1p7mwqSZojC2RJGmNJtgH2Bg4BqKpbgFtGGZMkjTsLZEkab/cH1gMfT7I7cCZwWFXd3G2UZBWwCmD58uULHuQgVqw+YdQhSNrMOAdZksbbUmAP4ENV9UjgZmD1xEbe1VSSZs8CWZLG2+XA5e3Nm6C5gdMeI4xHksaeBbIkjbGquhq4LMlD2kX7ABeOMCRJGnvOQZak8fca4Oj2ChY/AV424ngkaaxZIEvSmKuqs4GVo45DkhYLp1hIkiRJHRbIkiRJUocFsiRJktQxUIGcZNskxyW5KMnaJI8fVmCSJEnSKAz6Jb0PAF+vque1357eYggxSZIkSSMz5wI5yTbA3sAhAFV1C3DLcMKSJEmSRmOQEeT7A+uBjyfZHTgTOKyqbu42SrIKWAWwfPnyAbrbfKxYfcKoQ1gwo/is6w7fb8H7lCRJ42OQAnkpze1MX1NVpyX5ALAa+Ktuo6o6AjgCYOXKlTVAf5IkachGNSjjYMX8cgBqMIN8Se9y4PKqOq19fRxNwSxJkiSNrTkXyFV1NXBZkoe0i/YBLhxKVJIkSdKIDHoVi9cAR7dXsPgJ8LLBQ5IkSZJGZ6ACuarOBlYOKRZJkiRp5LyTniRJktRhgSxJkiR1WCBLkiRJHRbIkiRJUocFsiRJktQx6GXeFrXN6ZbPWpw2p2N4Md3BaS6SLAHWAFdU1bNGHY8kjTNHkCVpcTgMWDvqICRpMbBAlqQxl2RnYD/gI6OORZIWA6dYSNL4ez/wZmDrqRokWQWsAli+fPmcOtmcpuxIw+L/m/HkCLIkjbEkzwKuraozp2tXVUdU1cqqWrls2bIFik6SxpMFsiSNtz2B5yRZBxwLPDnJp0YbkiSNNwtkSRpjVfWWqtq5qlYABwLfqqoXjzgsSRprFsiSJElSx8AFcpIlSX6Y5CvDCEiSNDdVdbLXQJakwQ1jBNlrb0qSJGnRGKhA9tqbkiRJWmwGvQ7yglx7Uxp3XgdTkqTxMecRZK+9KUmSpMVokCkWXntTkiRJi86cC2SvvSlJkqTFyOsgS5IkSR2DfkkPaK69CZw8jG1JkiRJozSUAlmSJGlTjOLqPusO32/B+9ycjOqKTfPx7+oUC0mSJKnDAlmSJEnqsECWJEmSOiyQJUmSpA4LZEmSJKnDq1hoszOqb9lqfvmNeEnSsDiCLEmSJHVYIEuSJEkdFsiSJElShwWyJI2xJLsk+XaStUkuSHLYqGOSpHHnl/QkabzdCryxqs5KsjVwZpKTqurCUQcmSePKEWRJGmNVdVVVndU+vwlYC+w02qgkabw5gixJi0SSFcAjgdMmWbcKWAWwfPnyBY1L6gsv86nZmvMIsvPeJKk/kmwFfB54XVXdOHF9VR1RVSurauWyZcsWPkBJGiODjCA7702SeiDJXWiK46Or6vhRxyNJ427OI8jOe5Ok0UsS4KPA2qp636jjkaTFYChf0ptp3luSNUnWrF+/fhjdSZLusCfwEuDJSc5uH88cdVCSNM4G/pLebOa9AUcArFy5sgbtT5J0h6r6HpBRxyFJi8lAI8jOe5MkSdJiM8hVLJz3JkmSpEVnkBFk571JkiRp0ZnzHGTnvUmSJGkx8lbTkiRJUocFsiRJktRhgSxJkiR1WCBLkiRJHRbIkiRJUsfAd9JbKCtWnzDqECRJkrQZcARZkiRJ6rBAliRJkjoskCVJkqQOC2RJkiSpwwJZkiRJ6rBAliRJkjoskCVJkqSOgQrkJM9I8qMkP06yelhBSZJmz1wsScM15wI5yRLgg8C+wMOAg5I8bFiBSZJmZi6WpOEbZAT5McCPq+onVXULcCyw/3DCkiTNkrlYkoZskFtN7wRc1nl9OfDYiY2SrAJWtS83JPnRAH3O1vbAzxegn7kyvsH1PUbjG0zf4wPYPu8cKMZdhxTHMHPxOOx3MM5hM87hMs7hmjHOvHOg7U+aiwcpkDPJsrrTgqojgCMG6GeTJVlTVSsXss9NYXyD63uMxjeYvscHvYpxaLm4R59pWsY5XMY5XMY5XKOKc5ApFpcDu3Re7wxcOVg4kqRNZC6WpCEbpEA+A3hQkvsluStwIPCl4YQlSZolc7EkDdmcp1hU1a1JXg18A1gCfKyqLhhaZINZ0Ckdc2B8g+t7jMY3mL7HBz2Jcci5uBefaRaMc7iMc7iMc7hGEmeq7jRVTZIkSdpseSc9SZIkqcMCWZIkSeoY2wI5yZIkP0zylfb1Z5Kc3T7WJTm7Xb4iyS876z68ALGtS3Je29+adtm9kpyU5JL253ad9m9pbxH7oyRPn+/4ponx3UkuSnJuki8k2bZd3pd9+PYkV3TieGan/YLuwyni69MxuG2S49p/z7VJHt/DY3CyGPt0DE4WX2+Owbnqc+7sxNj7HDpNnL05hmeIs3fHct/zaifO3ufXGWLt4zHav3xbVWP5AN4AfBr4yiTr3gv8dft8BXD+Ase2Dth+wrJ3Aavb56uBd7bPHwacA9wNuB/wn8CSEcX4NGBp+/ydnRj7sg/fDrxpkrYLvg8ni69nx+BRwB+3z+8KbNvDY3CyGPt0DE4WX2+OwQE+V29zZyeO3ufQaeLszTE8Q5y9O5b7nlc7cfQ+v84Qax+P0d7l27EcQU6yM7Af8JFJ1gX4I+CYhY5rBvvTHAC0Pw/oLD+2qv6nqi4Ffkxz69gFV1UnVtWt7ctTaa6nOg56sw9h9Mdgkm2AvYGPAlTVLVV1PT06BqeKsS/H4DT7cCq9OganMqa5c6PeHL/T6csxPIBe7c+N+nJ8jkN+nSnWvh2jfc23Y1kgA+8H3gzcPsm63weuqapLOsvu155S/I8kv78A8RVwYpIz09zeFeC+VXUVQPvzPu3yyW4Tu9OIYuw6FPha53Uf9iHAq9vTQh/rnMIaxT6cbv+N+hi8P7Ae+Hjb50eSbEm/jsGpYuwa5TE4XXx9OQbnou+5c6NxyKFTxdk16jy6Ud/z6UxxQn+Oz3HIrzPF2tWHY7SX+XbsCuQkzwKuraozp2hyEL/5F+ZVwPKqeiTtqcX2r5X5tGdV7QHsC7wqyd7TtJ3VbWLnwZQxJnkrcCtwdLuoL/vwQ8ADgEe0Mb13Y8iTvH++9+F0/8ajPgaXAnsAH2r7vJnmlN9URrH/po2xB8fgVPH16RjcJGOSOzcahxwK/c+j08XZx2O5z3l1o3HIrxv1Pc/OFOdIj9GxK5CBPYHnJFkHHAs8OcmnAJIsBf4A+MzGxu0Q/C/a52fSzFV58HwGWFVXtj+vBb5AM/R/TZId2jh3AK5tm4/kNrFTxEiSg4FnAS+qdrJPX/ZhVV1TVbdV1e3Av3HHKZUF34fT7L8+HIOXA5dX1Wnt6+Nokk+fjsGpYuzLMThpfH06Bueg97mz03fvc+g0cfblGJ42zj4eyz3PqxuNQ36dKda+HaO9zLdjVyBX1VuqaueqWkFzS9VvVdWL29VPAS6qqss3tk+yLMmS9vn9gQcBP5mv+JJsmWTrjc9pJsOfT3Pr14PbZgcDX2yffwk4MMndktyvje/0+YpvuhiTPAP4C+A5VfXfnfa92Icbk0/ruTT7FRZ4H07zbww9OAar6mrgsiQPaRftA1xIj47BqWLsyzE4TXy9OAbnou+5s9Nv73PodHH25RieRZy9Opb7nlc3Gof8OlOsfTtG+5pv53yr6Z46kDtP4N8beEeSW4HbgFdW1XXzGMN9gS8kgWb/frqqvp7kDOCzSV4O/Ax4PkBVXZDkszT/wW4FXlVVt81jfNPF+GOab4We1K47tapeSX/24SeTPILmVMo64E9gJPtw0vjadX04BgFeAxyd5K40Ce5lNH8Q9+UYnCrGM+jHMThVfP/Uk2Nw2Ppy3MJ45NDp4uxLHp0pzr7k02njbNf16fiE8civ08Xapzw7XZwjzbfealqSJEnqGLspFpIkSdJ8skCWJEmSOiyQJUmSpA4LZEmSJKnDAlmSJEnqsEDWgkny3CSV5KGjjmUmSQ5Ncl6aW1yen2T/UcckScNgLpZm5mXetGDa6xbuAHyzqt4+hO0tmZdrHyY7A/9BcyefG5JsBSyrqksH2Oa8xCpJm8pcbC7WzBxB1oJoE9uewMtpLvpOkn3bRL2xzZOSfLl9/rQkpyQ5K8nn2veTZF2Sv07yPeD5SV6R5Iwk5yT5fJIt2nYPSHJqu+4dSTZ0+vnzdvm5Sf5mknDvA9wEbACoqg0bE3KSByb597a/s9p+kuTd7ejGeUle0Pk8307yaeC8JEvadhv7/pNh72dJmo652Fys2bFA1kI5APh6VV0MXJdkD+Ak4HFpbisK8ALgM0m2B/4P8JSq2gNYA7yhs61fVdVeVXUscHxVPbqqdgfW0iR9gA8AH6iqR9O5R3uSp9HclvIxwCOARyXZe0Ks5wDXAJcm+XiSZ3fWHQ18sO3vCcBVwB+029qd5pao784dt8h8DPDWqnpYG9sNbUyPBl6R5jaZkrRQzMXmYs2CBbIWykHAse3zY4GDqupW4OvAs5MsBfajuX/944CHAd9PcjbNfe137WzrM53nuyX5bpLzgBcBD2+XPx74XPv80532T2sfPwTOAh5Kk6T/V3v67RnA84CLgX9M8vYkWwM7VdUX2na/au9jvxdwTFXdVlXX0JwSfHS7udM7pwOfBry0/UynAfee2LckzTNzsblYs7B01AFo8Utyb+DJNAm0gCVAJXkzTYJ9FXAdcEZV3ZQkwElVddAUm7y58/xI4ICqOifJIcCTZgoH+L9V9a/TNapmcv7pwOlJTgI+Drxvmm1OpRtrgNdU1TdmiFGShs5c/BvtzMWaliPIWgjPAz5RVbtW1Yqq2gW4lOav/ZOBPYBXcMdoxKnAnkkeCJBkiyQPnmLbWwNXJbkLzajFRqcCf9g+P7Cz/BvAoZ15dDsluU93g0l2bE87bvQI4KdVdSNweZID2nZ3a+fZfQd4QTuvbRmwN01Cn+gbwJ+2sZLkwZ1TmpI038zFd/RtLta0LJC1EA4CvjBh2eeBF7an0L4C7Nv+pKrWA4cAxyQ5lybBTnU5or+iOUV2EnBRZ/nrgDckOZ3m29o3tNs+keY03yntqcDjaBJ7112A9yS5qD0F9wLgsHbdS4DXtnH9APjt9rOdSzNf7lvAm6vq6kli/QhwIXBWkvOBf8WzOJIWjrm4YS7WjLzMmxaldjThl1VVSQ6kmWfn9TMlaQGZizWu/ItJi9WjgH9p59BdDxw64ngkaXNkLtZYcgRZkiRJ6nAOsiRJktRhgSxJkiR1WCBLkiRJHRbIkiRJUocFsiRJktRhgSxJkiR1WCBLkiRJHRbIkiRJUocFsiRJktRhgSxJkiR1WCBLc5DkkCTfG3UckrQ5Mxdrvlggb2aSnJzkv5LcbZJ1L0yyJsmGJFcl+VqSvZJ8uF22IcktSX7def21SbbzuCQnJbkuyfokn0uyQ2d9krwzyS/ax7uSpLP+b5Ocl+TWJG+fsO2/7PS9Ickvk9yeZPspPu+6NubtJyw/O0klWTGLfbaibbt0prbTbGOvJD9IckO7X76f5NFz3Z6k8Tbuubhd/5oklya5sY13r2k+r7lYY8UCeTPSJqDfBwp4zoR1bwDeD/wDcF9gOfD/A/tX1Suraquq2qpd/5mNr6tq30m62g44AlgB7ArcBHy8s34VcACwO/B7wLOAP+ms/zHwZuCEiRuuqn/o9L0V8E7g5Kr6+TQf/VLgoM5n/V3gHtO0H6ok2wBfAf4ZuBewE/A3wP8MuZ8lw9yepPmxGHJxkscChwPPA+4JfBT4wgx5yFyssWGBvHl5KXAqcCRw8MaFSe4JvAN4VVUdX1U3V9Wvq+rLVfXnm9pJVX2tqj5XVTdW1X8D/wLs2WlyMPDeqrq8qq4A3gsc0nn/UVX1NZpkPqV2pOMlwFEzhPRJms/e7f8TE7a1X5IftiMhl00YLflO+/P6dqTm8Z33vacdBbo0yWS/oAAe3H6uY6rqtqr6ZVWdWFXndrbziiRrk9yU5MIke7TLf6cdabo+yQVJntN5z5FJPpTkq0luBv6/JDsm+Xw7WnRpktd22j+mHeW5Mck1Sd43w36TND8WQy5eAVxQVWdWVdHk1O2B+0wTkrkYc/G4sEDevLwUOLp9PD3JfdvljwfuDnxhnvrdG7ig8/rhwDmd1+e0yzbV79OMsHx+hnanAtu0CW4J8ALgUxPa3Eyzf7YF9gP+NMkBnfgBtm1Hak5pXz8W+BHNL4V3AR/tnp7suBi4LclRSfZNsl13ZZLnA29v+9+GZkTpF0nuAnwZOJHml85rgKOTPKTz9hcCfw9sDfygbX8OzcjIPsDrkjy9bfsB4ANVtQ3wAOCz0+wzSfNnMeTirwFLkjy2zauHAmcDV0/zHnNxw1w8BiyQNxNp5obtCny2qs4E/pPmPzTAvYGfV9Wt89Dv7wF/DXRHP7YCbvASZ34AABYHSURBVOi8vgHYaoqENp2DgeOqasMs2m4cuXgqcBFwRXdlVZ1cVedV1e3taMIxwBNn2OZPq+rfquo2mlHsHWgK9t9QVTcCe9GcTv03YH2SL3V+Kf4x8K6qOqMaP66qnwKPo9lXh1fVLVX1LZrTgwd1Nv/Fqvp+Vd0O/C6wrKre0bb/SdvfgW3bXwMPTLJ9VW2oqlNn3m2ShmkR5eKbaAYnvkczReFtwKp2NHk65mJz8ViwQN58HAyc2Jmr+2nuOLX3C2D7DPDFh8kkeSDNKMNhVfXdzqoNNH+db7QNsGEWibW77XsAz2fm6RUbfZLml9AhTDil127vsUm+3Z4OuwF4Jc1oxHT+d6SkPX0JTRK9k6paW1WHVNXOwG7AjjTzDAF2ofklOdGOwGVtwt3opzQjEhtd1nm+K7Bjewrw+iTXA3/JHb8oXk5zivGiJGckedYMn0/S8C2WXPzHNKPGDwfuCrwY+EqSHWd4n7nYXDwWLJA3A20x+UfAE5NcneRq4PXA7kl2B04BfkXzZY1h9bkr8O/A31bVJyesvoDmSyEb7c5vnvabjT8ArgNOnk3jdhTgUuCZwPGTNPk08CVgl6q6J/BhYOMoyqwL91nGchHN3MPd2kWX0Zxmm+hKYJck3f+ny/nNEZdubJcBl1bVtp3H1lX1zLbfS6rqIJpThO8Ejkuy5VA+lKQZLbJcvDvw5aq6uB3t/TpwFfCE6d5kLjYXjwsL5M3DAcBtwMOAR7SP3wG+C7y0qm6gOfX2wSQHJNkiyV3aOVrv2tTOkuwEfAv4YFV9eJImnwDekGSndrThjTRJauP775Lk7jTH59Ikd8+dvxV8MPCJTRl1pvmr/clVdfMk67YGrquqXyV5DHec8gRYD9wO3H8T+vpfSR6a5I1Jdm5f70Jzam7jabWPAG9K8qg0Htj+UjuNZj7em9t98iTg2cCxU3R1OnBjkr9Ico8kS5LslvYSRklenGRZOwpyffue2+bymSTNyWLKxWcA+yW5f5u3nkozKnr+LEIzF5uL+6+qfCzyB/B1mm8qT1z+RzSnppa2r18ErKFJBFfTXNrnCRPe83bgUzP09zaav6Y3dB+d9aH5IsV17eNdQDrrj2zf330c0lm/E3Ar8MBZfPZ1wFMmWb603e6K9vXzaE6Z3UQzt+xfup+T5pvl62mS2eNoTg9+b8I2a7KY2ng/SzPacHP781+BbTptXknzJZMNNL9gHtkufzjwHzRzAy8EnjthP/3dhL52pJmzdzXwXzSJ/yntuk8B17Z9XAAcMOpj04ePzemxmHJx+953AD9r8+Za4CXTxGIuNheP1SPtP5YkSZIknGIhSZIk/QYLZEmSJKnDAlmSJEnqsECWJEmSOoZ6MfKZbL/99rVixYqF7FKSeunMM8/8eVUtG0Xf5mJJakyVixe0QF6xYgVr1qxZyC4lqZeS/HRUfZuLJakxVS52ioUkSZLUYYEsSZIkdcxYICf5WJJrk5zfWXavJCcluaT9ud38hilJmzdzsSQtnNmMIB8JPGPCstXAN6vqQcA329eSpPlzJOZiSVoQMxbIVfUdmnu0d+0PHNU+Pwo4YMhxSZI6zMWStHDmehWL+1bVVQBVdVWS+0zVMMkqYBXA8uXL59jdaKxYfcJI+l13+H4j6VfS2NkscvEomP+lzdu8f0mvqo6oqpVVtXLZspFc8lOSNnvmYkmavbkWyNck2QGg/Xnt8EKSJM2SuViS5sFcC+QvAQe3zw8GvjiccCRJm8BcLEnzYDaXeTsGOAV4SJLLk7wcOBx4apJLgKe2ryVJ88RcLEkLZ8Yv6VXVQVOs2mfIsUiSpmAulqSF4530JEmSpA4LZEmSJKnDAlmSJEnqsECWJEmSOiyQJUmSpA4LZEmSJKnDAlmSJEnqsECWJEmSOiyQJUmSpI4Z76QnSZKkuVmx+oSR9Lvu8P1G0u9i4QiyJEmS1GGBLEmSJHVYIEuSJEkdFsiSJElShwWyJEmS1GGBLEmSJHVYIEuSJEkdFsiSJElShwWyJEmS1GGBLEmSJHUMVCAneX2SC5Kcn+SYJHcfVmCSpNkxF0vScM25QE6yE/BaYGVV7QYsAQ4cVmCSpJmZiyVp+AadYrEUuEeSpcAWwJWDhyRJ2kTmYkkaojkXyFV1BfAe4GfAVcANVXXixHZJViVZk2TN+vXr5x6pJOlOzMWSNHyDTLHYDtgfuB+wI7BlkhdPbFdVR1TVyqpauWzZsrlHKkm6E3OxJA3fIFMsngJcWlXrq+rXwPHAE4YTliRplszFkjRkgxTIPwMel2SLJAH2AdYOJyxJ0iyZiyVpyAaZg3wacBxwFnBeu60jhhSXJGkWzMWSNHxLB3lzVb0NeNuQYpEkzYG5WJKGyzvpSZIkSR0WyJIkSVKHBbIkSZLUYYEsSZIkdVggS5IkSR0WyJIkSVKHBbIkSZLUYYEsSZIkdVggS5IkSR0D3UlPi8eK1SeMOoQFs+7w/UYdwoIZxb/r5rR/JUmLkyPIkiRJUocFsiRJktRhgSxJkiR1WCBLkiRJHRbIkiRJUocFsiRJktRhgSxJkiR1WCBLkiRJHRbIkiRJUocFsiRJktQxUIGcZNskxyW5KMnaJI8fVmCSpNkxF0vScC0d8P0fAL5eVc9LcldgiyHEJEnaNOZiSRqiORfISbYB9gYOAaiqW4BbhhOWJGk2zMWSNHyDjCDfH1gPfDzJ7sCZwGFVdXO3UZJVwCqA5cuXD9CdJGkS5uJFZMXqExa8z3WH77fgfUp9N8gc5KXAHsCHquqRwM3A6omNquqIqlpZVSuXLVs2QHeSpEmYiyVpyAYpkC8HLq+q09rXx9EkaUnSwjEXS9KQzblArqqrgcuSPKRdtA9w4VCikiTNirlYkoZv0KtYvAY4uv3W9E+Alw0ekiRpE5mLJWmIBiqQq+psYOWQYpEkzYG5WJKGyzvpSZIkSR0WyJIkSVKHBbIkSZLUYYEsSZIkdVggS5IkSR0WyJIkSVKHBbIkSZLUYYEsSZIkdVggS5IkSR2D3mpa82DF6hNGHYIk3Ym5SdLmwhFkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeoYuEBOsiTJD5N8ZRgBSZI2nblYkoZnGCPIhwFrh7AdSdLcmYslaUgGKpCT7AzsB3xkOOFIkjaVuViShmvQEeT3A28Gbh9CLJKkuTEXS9IQLZ3rG5M8C7i2qs5M8qRp2q0CVgEsX758rt2xYvUJc36vNGoev5ovC52LtfhsTvlp3eH7jToEjYlBRpD3BJ6TZB1wLPDkJJ+a2KiqjqiqlVW1ctmyZQN0J0mahLlYkoZszgVyVb2lqnauqhXAgcC3qurFQ4tMkjQjc7EkDZ/XQZYkSZI65jwHuauqTgZOHsa2JElzYy6WpOFwBFmSJEnqsECWJEmSOiyQJUmSpA4LZEmSJKnDAlmSJEnqsECWJEmSOiyQJUmSpA4LZEmSJKnDAlmSJEnqGMqd9CRp1FasPmHB+1x3+H4L3qekuRtFnticjGr/zkcudgRZkiRJ6rBAliRJkjoskCVJkqQOC2RJkiSpwwJZkiRJ6rBAliRJkjoskCVJkqQOC2RJkiSpwwJZkiRJ6rBAliRJkjrmXCAn2SXJt5OsTXJBksOGGZgkaWbmYkkavqUDvPdW4I1VdVaSrYEzk5xUVRcOKTZJ0szMxZI0ZHMeQa6qq6rqrPb5TcBaYKdhBSZJmpm5WJKGbyhzkJOsAB4JnDaM7UmSNp25WJKGY5ApFgAk2Qr4PPC6qrpxkvWrgFUAy5cvH7Q7aWArVp8w6hAWNffvaJiLJXWZiwcz0AhykrvQJOSjq+r4ydpU1RFVtbKqVi5btmyQ7iRJkzAXS9JwDXIViwAfBdZW1fuGF5IkabbMxZI0fIOMIO8JvAR4cpKz28czhxSXJGl2zMWSNGRznoNcVd8DMsRYJEmbyFwsScPnnfQkSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkDgtkSZIkqcMCWZIkSeqwQJYkSZI6LJAlSZKkjoEK5CTPSPKjJD9OsnpYQUmSZs9cLEnDNecCOckS4IPAvsDDgIOSPGxYgUmSZmYulqThG2QE+THAj6vqJ1V1C3AssP9wwpIkzZK5WJKGbOkA790JuKzz+nLgsRMbJVkFrGpfbkjyozn2tz3w8zm+dyEY3+D6HqPxDa7vMW5SfHnnQH3tOtC777DQuXg6i+rfdwSMb+76HBsY36CmjW8+cvEgBXImWVZ3WlB1BHDEAP00nSVrqmrloNuZL8Y3uL7HaHyD63uMfY9vCguai6cNpOf7z/gG0+f4+hwbGN+gRhHfIFMsLgd26bzeGbhysHAkSZvIXCxJQzZIgXwG8KAk90tyV+BA4EvDCUuSNEvmYkkasjlPsaiqW5O8GvgGsAT4WFVdMLTI7mxeTw0OgfENru8xGt/g+h5j3+O7kxHk4un0ff8Z32D6HF+fYwPjG9SCx5eqO01VkyRJkjZb3klPkiRJ6rBAliRJkjp6VyAn+ViSa5Oc31n2iCSnJjk7yZokj+lhjLsnOSXJeUm+nGSbEca3S5JvJ1mb5IIkh7XL75XkpCSXtD+361l8z29f355kZJebmSa+dye5KMm5Sb6QZNsexvi3bXxnJzkxyY59iq+z/k1JKsn2o4hvuhiTvD3JFe0+PDvJM0cVY5/1PVf3OU+bo+ctvl7k6D7n577n5l7l5arq1QPYG9gDOL+z7ERg3/b5M4GTexjjGcAT2+eHAn87wvh2APZon28NXExzC9p3Aavb5auBd/Ysvt8BHgKcDKzs4f57GrC0Xf7OUe2/GWLcptPmtcCH+xRf+3oXmi+U/RTYvof78O3Am0YV17g8+p6r+5ynzdHzFl8vcnSf83Pfc3Of8nLvRpCr6jvAdRMXAxv/0r8nI77G5xQxPgT4Tvv8JOAPFzSojqq6qqrOap/fBKyludvW/sBRbbOjgAP6FF9Vra2q+bi71yaZJr4Tq+rWttmpNNeb7VuMN3aabckkN4wYZXzt6n8E3jyq2DaaIUbNoO+5us952hw9mL7n6D7n577n5j7l5d4VyFN4HfDuJJcB7wHeMuJ4JnM+8Jz2+fP5zQv3j0ySFcAjgdOA+1bVVdAchMB9RhdZY0J8vTNNfIcCX1voeCYzMcYkf9/+X3kR8Neji6zRjS/Jc4ArquqckQY1wST/zq9uT4V+bFSnucdU33N17/K0OXowfc/Rfc7Pfc/No87L41Ig/ynw+qraBXg98NERxzOZQ4FXJTmT5rTALSOOhyRbAZ8HXjfhL9deGNf4krwVuBU4elSxdWK5U4xV9db2/8rRwKv7Eh/NPnsrPSjauybZhx8CHgA8ArgKeO8Iwxs3fc/VvcrT45oD+6LvObrP+bnvubkXeXmh55fM5gGs4Dfnjd3AHddsDnBj32KcsO7BwOkjju8uNHOJ3tBZ9iNgh/b5DsCP+hRfZ93JjHB+23TxAQcDpwBbjDK+mfZhu37XqY7RUcQH/C5wLbCufdwK/Az47b7EOMn6Kf+f++h/ru5znjZHz098fcnRfc7Pfc/NfcnL4zKCfCXwxPb5k4FLRhjLpJLcp/35W8D/AT48wlhCM3Kztqre11n1JZrkQfvziwsdG0wbXy9MFV+SZwB/ATynqv57VPG1sUwV44M6zZ4DXLTQsbVx3Cm+qjqvqu5TVSuqagVwOc2XMa7uS4zt8h06zZ5Lc1pes9PrXN2XPG2OHkzfc3Sf83Pfc3Of8nLv7qSX5BjgScD2wDXA22j+qv4Aza2xfwX8WVWd2bMYtwJe1TY5HnhLjWjnJtkL+C5wHnB7u/gvaebxfBZYTvPX4fOrauKXWEYZ392AfwaWAdcDZ1fV03sU3z+1Mf6iXXZqVb1yoeODaWN8Oc0XkW6n+SbyK6vqir7EV1Vf7bRZRzMK9fOFjq/tf6p9eBDNabyiGU35k2rnheoOfc/Vfc7T5uh5i68XObrP+bnvublPebl3BbIkSZI0SuMyxUKSJElaEBbIkiRJUocFsiRJktRhgSxJkiR1WCBLkiRJHRbIWjBJnpukkjx01LHMJMmhSc5rb2t5fpL9Rx2TJA2DuViamZd504JJ8lmau0N9s6rePoTtLamq2wYO7M7b3Rn4D5oLpd/Q3vJyWVVdOsA25yVWSdpU5mJzsWbmCLIWRJvY9qS5UPqB7bJ920S9sc2Tkny5ff60JKckOSvJ59r3k2Rdkr9O8j3g+UlekeSMJOck+XySLdp2D0hyarvuHUk2dPr583b5uUn+ZpJw7wPcBGwAqKoNGxNykgcm+fe2v7PafpLk3e3oxnlJXtD5PN9O8mngvCRL2nYb+/6TYe9nSZqOudhcrNmxQNZCOQD4elVdDFyXZA/gJOBxSbZs27wA+EyS7WluA/uUqtoDWAO8obOtX1XVXlV1LHB8VT26qnYH1tIkfWju5vWBqno0ze1vgSbZAw8CHkNzV55HJdl7Qqzn0Nx569IkH0/y7M66o4EPtv09AbgK+IN2W7sDTwHenTtui/kY4K1V9bA2thvamB4NvCLJ/TZpL0rSYMzF5mLNggWyFspBwLHt82OBg6rqVuDrwLOTLAX2A74IPA54GPD9JGcDBwO7drb1mc7z3ZJ8N8l5wIuAh7fLHw98rn3+6U77p7WPHwJnAQ+lSdL/qz399gzgecDFwD8meXuSrYGdquoLbbtfVdV/A3sBx1TVbVV1Dc0pwUe3mzu9czrwacBL2890GnDviX1L0jwzF5uLNQtLRx2AFr8k9waeTJNAC1gCVJI30yTYVwHXAWdU1U1JApxUVQdNscmbO8+PBA6oqnOSHAI8aaZwgP9bVf86XaNqJuefDpye5CTg48D7ptnmVLqxBnhNVX1jhhglaejMxb/RzlysaTmCrIXwPOATVbVrVa2oql2AS2n+2j8Z2AN4BXeMRpwK7JnkgQBJtkjy4Cm2vTVwVZK70IxabHQq8Ift8wM7y78BHNqZR7dTkvt0N5hkx/a040aPAH5aVTcClyc5oG13t3ae3XeAF7Tz2pYBe9Mk9Im+AfxpGytJHtw5pSlJ881cfEff5mJNywJZC+Eg4AsTln0eeGF7Cu0rwL7tT6pqPXAIcEySc2kS7FSXI/ormlNkJwEXdZa/DnhDktNpvq19Q7vtE2lO853Sngo8jiaxd90FeE+Si9pTcC8ADmvXvQR4bRvXD4Dfbj/buTTz5b4FvLmqrp4k1o8AFwJnJTkf+Fc8iyNp4ZiLG+ZizcjLvGlRakcTfllVleRAmnl2Xj9TkhaQuVjjyr+YtFg9CviXdg7d9cChI45HkjZH5mKNJUeQJUmSpA7nIEuSJEkdFsiSJElShwWyJEmS1GGBLEmSJHVYIEuSJEkd/w/UCbybmqwtEAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 720x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "subplot_histograms(final, ['sat_2017_math', 'sat_2018_math', 'act_2017_math', 'act_2018_average_math_score'], \n",
    "                   ['SAT 2017 Math Scores', 'SAT 2018 Math Scores', 'ACT 2017 Math Scores', 'ACT 2018 Math Scores'], \n",
    "                   ['Average Score', 'Average Score', 'Average Score', 'Average Score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "subplot_histograms(final, \n",
    "                   ['act_2017_english', 'act_2017_reading', 'act_2018_average_english_score', 'act_2018_average_reading_score',\n",
    "                    'sat_2017_reading_and_writing', 'sat_2018_reading_and_writing'],\n",
    "                   ['ACT 2017 English Scores', 'ACT 2017 Reading Scores', 'ACT 2018 English Scores', 'ACT 2018 Reading Scores', \n",
    "                    'SAT 2017 Reading/Writing Scores', 'SAT 2018 Reading/Writing Scores'],\n",
    "                   ['Average Score', 'Average Score', 'Average Score', 'Average Score', 'Average Score', 'Average Score'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot and interpret scatter plots\n",
    "\n",
    "For each of the following:\n",
    "- SAT vs. ACT math scores for 2017\n",
    "- SAT vs. ACT verbal/reading scores for 2017\n",
    "- SAT vs. ACT total/composite scores for 2017\n",
    "- Total scores for SAT 2017 vs. 2018\n",
    "- Composite scores for ACT 2017 vs. 2018\n",
    "\n",
    "Plot the two variables against each other using matplotlib or Seaborn\n",
    "\n",
    "Your plots should show:\n",
    "- Two clearly labeled axes\n",
    "- A proper title\n",
    "- Using colors and symbols that are clear and unmistakable\n",
    "\n",
    "**Feel free to write a custom function, and subplot if you'd like.** Functions save both time and space.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>color</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.180604</td>\n",
       "      <td>0.596238</td>\n",
       "      <td>#3498db</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.116554</td>\n",
       "      <td>0.056934</td>\n",
       "      <td>#3498db</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.554887</td>\n",
       "      <td>0.509311</td>\n",
       "      <td>#9b59b6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.893850</td>\n",
       "      <td>0.408663</td>\n",
       "      <td>#9b59b6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.911975</td>\n",
       "      <td>0.071009</td>\n",
       "      <td>#3498db</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0.275704</td>\n",
       "      <td>0.798916</td>\n",
       "      <td>#9b59b6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>0.535578</td>\n",
       "      <td>0.970116</td>\n",
       "      <td>#9b59b6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>0.328064</td>\n",
       "      <td>0.759783</td>\n",
       "      <td>#9b59b6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>0.692143</td>\n",
       "      <td>0.315874</td>\n",
       "      <td>#3498db</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>0.834044</td>\n",
       "      <td>0.290763</td>\n",
       "      <td>#3498db</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           x         y    color\n",
       "0   0.180604  0.596238  #3498db\n",
       "1   0.116554  0.056934  #3498db\n",
       "2   0.554887  0.509311  #9b59b6\n",
       "3   0.893850  0.408663  #9b59b6\n",
       "4   0.911975  0.071009  #3498db\n",
       "..       ...       ...      ...\n",
       "95  0.275704  0.798916  #9b59b6\n",
       "96  0.535578  0.970116  #9b59b6\n",
       "97  0.328064  0.759783  #9b59b6\n",
       "98  0.692143  0.315874  #3498db\n",
       "99  0.834044  0.290763  #3498db\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21a9075e5e0>"
      ]
     },
     "execution_count": 266,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10,5))\n",
    "\n",
    "sns.regplot(data=final, x=\"sat_2017_math\", y=\"act_2017_math\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21a90a1eeb0>"
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(data=final, x=\"sat_2017_total\", y=\"act_2017_composite\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot and interpret boxplots\n",
    "\n",
    "For each numeric variable in the dataframe create a boxplot using Seaborn. Boxplots demonstrate central tendency and spread in variables. In a certain sense, these are somewhat redundant with histograms, but you may be better able to identify clear outliers or differences in IQR, etc.\n",
    "\n",
    "Multiple values can be plotted to a single boxplot as long as they are of the same relative scale (meaning they have similar min/max values).\n",
    "\n",
    "Each boxplot should:\n",
    "- Only include variables of a similar scale\n",
    "- Have clear labels for each variable\n",
    "- Have appropriate titles and labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feel free to do additional plots below\n",
    "*(do research and choose your own chart types & variables)*\n",
    "\n",
    "Are there any additional trends or relationships you haven't explored? Was there something interesting you saw that you'd like to dive further into? It's likely that there are a few more plots you might want to generate to support your narrative and recommendations that you are building toward. **As always, make sure you're interpreting your plots as you go**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (Optional): Using Tableau, create a choropleth map for each variable using a map of the US. \n",
    "\n",
    "Save this plot as an image file in an images directory, provide a relative path, and insert the image into notebook in markdown."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descriptive and Inferential Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Summarizing Distributions\n",
    "\n",
    "Above, we used pandas `describe` to provide quick summary statistics of our numeric columns. We also demonstrated many visual relationships.\n",
    "\n",
    "As data scientists, having a complete understanding of data is imperative prior to modeling.\n",
    "\n",
    "While we will continue to build our analytic tools, we know that measures of *central tendency*, *spread*, and *shape/skewness* provide a quick summary of distributions.\n",
    "\n",
    "For each variable in your data, summarize the underlying distributions (in words & statistics)\n",
    " - Be thorough in your verbal description of these distributions.\n",
    " - Be sure to back up these summaries with statistics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answers:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "#### Distributions in the data\n",
    "\n",
    "In this dataset, each data represents a sample from a population.                        \n",
    "For example, for act_2017 math test:\n",
    "- Population: the test results of all the students who take this test, nation-wide.\n",
    "- Population mean: is the national average of act_2017 math test (total scores/total no. of test takers) \n",
    "- Sample: the state means of act_2017 math test. We have 51 samples (51 states)\n",
    "\n",
    "***According to CLT, we generally assuming that data we sample from a population will be normally distributed. Do we observe this trend?***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Does This Assumption Hold for:\n",
    "    - Math\n",
    "    - Reading\n",
    "    - Rates\n",
    "Explain your answers for each distribution and how you think this will affect estimates made from these data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Estimate Limits of Data\n",
    "\n",
    "Suppose we only seek to understand the relationship between sat_2017 and act_2017 participation rates in 2017. \n",
    "\n",
    "##### Does it make sense to conduct statistical inference given these data specifically? \n",
    "\n",
    "Why or why not?\n",
    "\n",
    "*(think about granularity, aggregation, the relationships between populations size & rates...consider the act_2017ually populations these data describe in answering this question)*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Is it appropriate to compare *these* specific sat_2017 and act_2017 math scores  - can we say students with higher sat_2017 math score is better than those with lower act_2017 math score, or vice versa?\n",
    "\n",
    "Why or why not?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Statistical Evaluation of Distributions \n",
    "\n",
    "**If you feel it's appropriate**, using methods we discussed in class, run hypothesis tests to compare variables of interest in our dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Code:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Outside Research"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based upon your observations, choose **three** states that demonstrate interesting trends in their sat_2017 and/or act_2017 participation rates. Spend some time doing outside research on state policies that might influence these rates, and summarize your findings below. **Feel free to go back and create new plots that highlight these states of interest**. If you bring in any outside tables or charts, make sure you are explicit about having borrowed them. If you quote any text, make sure that it renders as being quoted. (Make sure that you cite your sources -- check with you local instructor for citation preferences)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusions and Recommendations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on your exploration of the data, what are you key takeaways and recommendations? Choose one state with a lower participation rate and provide a suggestion for how the College Board might increase participation amongst graduating seniors in this state. Are there additional data you desire that would better inform your investigations?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
